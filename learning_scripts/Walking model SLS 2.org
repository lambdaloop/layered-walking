#+TITLE: SLS walking model 2

* Goal
This notebook builds upon the first SLS walking model notebook:
[[file:Walking model SLS.org]]

The goal is to extend that previous notebook in order to:
- model turning left/right
- have a trajectory model for each of the 6 legs
- integrate the 6 leg models together with a phase coordinator

* Setup
#+BEGIN_SRC jupyter-python
import pandas as pd
import numpy as np

from tqdm import tqdm, trange
from scipy import stats, signal
import os
from collections import Counter
import pickle
import time
import sys
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

plt.style.use('default')
plt.rcParams['figure.figsize'] = (7.5, 2)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

import tensorflow as tf

from model_functions import get_props_by_bouts, get_sw_xy, get_period, get_speed
from model_functions import prop_params
from model_functions import MLPScaledXY, num_vars
from model_functions import wrap_array, summarize

print("TensorFlow version: {}".format(tf.__version__))
#+END_SRC

#+RESULTS:
: TensorFlow version: 2.3.1

I need these lines so that the GPU doesn't take up the whole memory in tensorflow
#+BEGIN_SRC jupyter-python
gpus = tf.config.list_physical_devices('GPU')
if gpus:
  try:
    # Currently, memory growth needs to be the same across GPUs
    for gpu in gpus:
      tf.config.experimental.set_memory_growth(gpu, True)
    logical_gpus = tf.config.list_logical_devices('GPU')
    print(len(gpus), "Physical GPUs,", len(logical_gpus), "Logical GPUs")
  except RuntimeError as e:
    # Memory growth must be set before GPUs have been initialized
    print(e)
#+END_SRC

#+RESULTS:
: 1 Physical GPUs, 1 Logical GPUs


* Load the data

** Constants
Some constants
#+BEGIN_SRC jupyter-python
FPS = 300.0

legs = ['L1', 'L2', 'L3', 'R1', 'R2', 'R3']
items = {
    'A_flex': 'coxa abduction',
    'A_abduct': 'body-coxa flexion',
    'A_rot': 'coxa rotation',
    'B_flex': 'coxa-femur flexion',
    'B_rot': 'femur rotation',
    'C_flex': 'femur-tibia flexion',
    'C_rot': 'tibia rotation',
    'D_flex': 'tibia-tarsus flexion'
}

small_main = ['C_flex']
subset_main = ['C_flex', 'A_rot', 'A_abduct', 'B_flex', 'B_rot']
# full_main = ['A_flex', 'A_abduct', 'A_rot', 'B_flex', 'B_rot', 'C_flex', 'C_rot', 'D_flex']
# full_main = ['A_flex', 'A_abduct', 'A_rot', 'B_flex', 'B_rot', 'C_flex', 'C_rot']
full_main = ['A_abduct', 'A_flex', 'B_flex', 'C_flex', 'D_flex', 'A_rot', 'B_rot', 'C_rot']

#+END_SRC

#+RESULTS:


** Functions

#+BEGIN_SRC jupyter-python
def get_context_var(name, c):
    if name == 'fictrac_speed':
        return fictrac_vals[c, 1] # delta_rot_lab_y_mms
    elif name == 'fictrac_rot':
        return fictrac_vals[c, 2] # delta_rot_lab_z_mms
    elif name == 'fictrac_side':
        return fictrac_vals[c, 0] # delta_rot_lab_x_mms
    elif name == 'period':
        ix = angle_names.index('L1C_flex')
        return get_period(angles_raw[c, ix])
    elif name == 'frequency':
        ix = angle_names.index('L1C_flex')
        return get_speed(angles_raw[c, ix])
    else:
        raise ValueError("invalid context name: {}".format(name))

def get_context(context_list, c):
    if len(context_list) == 0:
        return np.zeros((np.sum(c), 0))
    L = []
    for name in context_list:
        L.append(get_context_var(name, c))
    context = np.vstack(L).T
    return context

def get_data(good_bouts, params, angles_main,
             phase_ang='L1C_flex', phase_offset=0):
    ix = [angle_names.index(name) for name in angles_main]
    c = np.isin(bout_numbers, good_bouts)
    inp = np.hstack([angles_raw[:,ix][c], angles_deriv[:,ix][c]])
    accel = angles_accel[:,ix][c]

    ix_p = angle_names.index(phase_ang)
    praw = wrap_array(phases[c, ix_p] + phase_offset)
    pderiv = wrap_array(phases_deriv[c, ix_p])
    context = get_context(params['context'], c)
    fnum = framenums[c]
    fname = fullfiles[c]
    check = (fname[1:] == fname[:-1]) & (fnum[1:]-1 == fnum[:-1])
    bnums = bout_numbers[c][1:][check]

    x_walk = np.hstack([inp, context, np.cos(praw), np.sin(praw)])[:-1]
    y_walk = np.hstack([accel, pderiv])[1:]

    x_walk = x_walk[check].astype('float32')
    y_walk = y_walk[check].astype('float32')
    msx_w = summarize(x_walk)
    msy_w = summarize(y_walk)

    return (x_walk, y_walk, msx_w, msy_w), bnums

def filter_bouts(bnums):
  ix = angle_names.index('L1C_flex')
  good_bouts = []
  for bnum in tqdm(np.unique(bnums), ncols=70):
      # if bnum == 0 or np.isnan(bnum): continue
      # cc = np.isclose(bout_numbers, bnum)
      cc = bout_numbers == bnum
      raw = np.abs(angles_raw[cc, ix])
      # deriv = angles_deriv[cc, ix] / FPS
      low, high = np.percentile(raw, [5, 95])
      # high_deriv = np.percentile(deriv, 95)
      vals = fictrac_vals[cc]
      if not np.all(np.isfinite(vals)):
          continue
      some_walking = np.mean(vals[:,1]) > 1.0
      # no_turning = np.abs(np.mean(vals[:,0])) < 2.0
      if some_walking and  high - low > 30 and len(raw) >= 150:
          good_bouts.append(bnum)
  good_bouts = np.array(good_bouts)
  return good_bouts

#+END_SRC

#+RESULTS:




** Data files
#+BEGIN_SRC jupyter-python
prefix = '/home/pierre/data/tuthill/summaries/v3-b4/lines'
fnames = [
  "evyn--Berlin-WT.pq",  "sarah--rv1-Berlin-WT.pq",
  # "sarah--rv4-Berlin-WT.pq",
  # "sarah--rv3-Berlin-WT.pq",  "sarah--rv10-Berlin-WT.pq"
]
ds = []
for fname in fnames:
  print(fname)
  d = pd.read_parquet(os.path.join(prefix, fname))
  ds.append(d)
data = pd.concat(ds)
#+END_SRC

#+RESULTS:
: evyn--Berlin-WT.pq
: sarah--rv1-Berlin-WT.pq

#+RESULTS:

** Compute more values

#+BEGIN_SRC jupyter-python
check = data['walking_bout_number'].notna().values

angle_names = [leg + name for leg in legs for name in subset_main]
angle_deriv_names = [leg + name +"_d1" for leg in legs for name in subset_main]
angle_accel_names = [leg + name +"_d2" for leg in legs for name in subset_main]

all_angles_main = [[leg + a for a in subset_main] for leg in legs]
angles_main = all_angles_main[0]

phase_angles = ['L1C_flex', 'L2B_rot', 'L3C_flex', 'R1C_flex', 'R2B_rot', 'R3C_flex']
phase_offsets = [np.pi, 0, 0, np.pi, np.pi, 0] # to make the phases consistent

all_names = angle_names + angle_deriv_names
# all_names = joint_names + joint_deriv_names

angles_raw = data.loc[check, angle_names].values
# angles_deriv = data.loc[check, angle_deriv_names].values
# angles_accel = data.loc[check, angle_accel_names].values
# phases = np.mod(phases_d.loc[check].values, 2*np.pi)

cc = [x[-6:] == 'C_flex' for x in angle_names]
angles_raw[:,cc] = np.abs(angles_raw[:,cc])

fullfiles = data.loc[check, 'fullfile'].to_numpy()
framenums = data.loc[check, 'fnum'].to_numpy()
flyids = data.loc[check, 'flyid'].to_numpy()

bout_numbers_raw = data.loc[check, 'walking_bout_number'].values.astype('int64')
bout_numbers = flyids + " b" + bout_numbers_raw.astype('str')


# fictrac_vals = data.loc[check, ['fictrac_speed', 'fictrac_rot']].values
fictrac_vals = data.loc[check, [
  # 'fictrac_speed_mms',
  'fictrac_delta_rot_lab_x_mms',
  'fictrac_delta_rot_lab_y_mms',
  'fictrac_delta_rot_lab_z_mms']].values

fictrac_vals[:, 1] = -1 * fictrac_vals[:, 1]

#+END_SRC

#+RESULTS:



#+begin_src jupyter-python
def fix_angle(vals):
    s = np.zeros(vals.shape)
    if len(vals.shape) == 1:
        d = np.append(0, np.diff(vals, axis=0))
    elif len(vals.shape) == 2:
        d = np.pad(np.diff(vals, axis=0), pad_width=((1, 0), (0,0)))
    else:
        raise ValueError("Unsupported input shape for fix_angle: {}".format(vals.shape))
    s[d > 160] = -360
    s[d < -160] = 360
    out = np.cumsum(s, axis=0) + vals
    return out
#+end_src

#+RESULTS:

:END:
#+RESULTS:


#+BEGIN_SRC jupyter-python
angles_deriv = np.zeros(angles_raw.shape)
angles_accel = np.zeros(angles_raw.shape)
phases = np.zeros(angles_raw.shape)
phases_deriv = np.zeros(phases.shape)

sos = signal.butter(1, (0.02, 0.4), 'bandpass', output='sos')

for f in tqdm(np.unique(fullfiles), ncols=70):
  cc = np.where(fullfiles == f)[0]
  ang = fix_angle(angles_raw[cc])
  angles_raw[cc] = ang
  angles_deriv[cc] = signal.savgol_filter(ang, 5, 2, deriv=1, axis=0)
  angles_accel[cc] = signal.savgol_filter(ang, 5, 2, deriv=2, axis=0)

  ang_f = signal.sosfiltfilt(sos, ang, axis=0)
  phases[cc] = np.mod(np.angle(signal.hilbert(ang_f, axis=0)), 2*np.pi)
  phases_deriv[cc] = signal.savgol_filter(np.unwrap(phases[cc], axis=0),
                                          5, 2, deriv=1, axis=0, mode='nearest')

#+END_SRC

#+RESULTS:
: 100%|████████████████████████████| 2298/2298 [00:21<00:00, 107.90it/s]
:RESULTS:



#+BEGIN_SRC jupyter-python
plt.plot(fix_angle(angles_raw[cc, 9]))
# _ = plt.hist(angles_accel[cc, 3], bins=100)
#+END_SRC

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7fd54403b760> |
[[file:./.ob-jupyter/b1dd1fdadd1bc46ce794cea15179b1780cb3cce2.png]]
:END:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7fd84a05bb50> |
[[file:./.ob-jupyter/b1dd1fdadd1bc46ce794cea15179b1780cb3cce2.png]]
:END:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7fd8414383d0> |
[[file:./.ob-jupyter/b1dd1fdadd1bc46ce794cea15179b1780cb3cce2.png]]
:END:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: NameError                                 Traceback (most recent call last)
: <ipython-input-11-ce540207d78f> in <module>
: ----> 1 plt.plot(fix_angle(angles_raw[cc, 9]))
:       2 # _ = plt.hist(angles_accel[cc, 3], bins=100)
:
: NameError: name 'angles_raw' is not defined
:END:


** Format the data

#+BEGIN_SRC jupyter-python
ix = angle_names.index('L3B_rot')
_ = plt.hist(angles_raw[:,ix], bins=100)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/96f762ef34e0f3ebec8a62a2d99c1fb16e27acde.png]]


#+BEGIN_SRC jupyter-python
for i in range(3):
    plt.figure()
    _ = plt.hist(fictrac_vals[:,i], bins=100)
    plt.xlim(-30, 30)
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/2d4e05f28ffbed936debea0dbf51fe8632980118.png]]
[[file:./.ob-jupyter/8bc728c981cb7d910372d97b954faa197fba93da.png]]
[[file:./.ob-jupyter/35ca5e1306dbee30ac329ec7dfa832300b6d5853.png]]
:END:


#+BEGIN_SRC jupyter-python
# fly = "6.15.20 Fly 4_0"
# fly = "all"
# bnums = np.unique(bout_numbers[flyids == fly])
bnums = np.unique(bout_numbers)
ix = angle_names.index('L1C_flex')

good_bouts = filter_bouts(bnums)

np.random.seed(123)
np.random.shuffle(good_bouts)
#+END_SRC

#+RESULTS:
: 100%|█████████████████████████████| 3748/3748 [00:43<00:00, 85.33it/s]

#+BEGIN_SRC jupyter-python
params = {'context': ['fictrac_speed', 'fictrac_rot', 'fictrac_side'], 'use_phase': True}
# params = {'context': ['fictrac_speed'], 'use_phase': True}

xy_ws = []
xy_ws_test = []

for i in range(len(all_angles_main)):
    xy_w, bnums = get_data(good_bouts[:-20], params, all_angles_main[i],
                           phase_angles[i], phase_offsets[i])
    xy_w_test, bnums_test = get_data(good_bouts[-20:], params, all_angles_main[i],
                                     phase_angles[i], phase_offsets[i])
    xy_ws.append(xy_w)
    xy_ws_test.append(xy_w_test)

print("Data points in training set:", len(xy_w[0]))
print("Data points in test set:", len(xy_w_test[0]))
#+END_SRC

#+RESULTS:
: Data points in training set: 569196
: Data points in test set: 6648

* Simple MLP (multileg)
** Train the model
*** Constants

#+BEGIN_SRC jupyter-python
# batch_size = 2500
# n_epochs = 6000
batch_size = 8000
n_epochs = 400
# n_epochs = 1000
#+END_SRC

#+RESULTS:

*** Model setup

#+BEGIN_SRC jupyter-python
ms_walk = []
for xy_w in xy_ws:
    model_walk = MLPScaledXY(output_dim=xy_w[1].shape[1],
                             hidden_dim=256, dropout_rate=0.05,
                             msx=xy_w[2], msy=xy_w[3])
    ms_walk.append(model_walk)
    model_walk(xy_w[0][:2])
    print('Walk', num_vars(model_walk))
#+END_SRC

#+RESULTS:
: Walk 71430
: Walk 71430
: Walk 71430
: Walk 71430
: Walk 71430
: Walk 71430

*** Training function

#+BEGIN_SRC jupyter-python
lr = tf.Variable(1e-3)
opt = tf.keras.optimizers.Adam(learning_rate=lr)

def make_step():
    @tf.function
    def step_mlp_norm(model_walk, in_walk, out_walk):
      """Performs one optimizer step on a single mini-batch."""
      with tf.GradientTape() as tape:
          pred_walk = model_walk(in_walk, is_training=True)
          error_walk = tf.square(out_walk - pred_walk) / tf.square(model_walk.msy[1])
          loss = tf.reduce_mean(error_walk)

      variables = model_walk.trainable_variables
      grads = tape.gradient(loss, variables)
      opt.apply_gradients(zip(grads, variables))
      return loss
    return step_mlp_norm
#+END_SRC

#+RESULTS:

*** Running the training

#+BEGIN_SRC jupyter-python
for leg, model_walk, xy_w in zip(legs, ms_walk, xy_ws):
    step_mlp_norm = make_step()
    print(leg)
    in_walk = xy_w[0]
    out_walk = xy_w[1]

    t0 = time.time()

    for epoch_num in range(n_epochs+1):
        ixs = np.arange(len(in_walk))
        np.random.shuffle(ixs)
        total = 0
        num = 0
        for s in range(0, len(ixs), batch_size):
            c = ixs[s:s+batch_size]
            in_walk_c = tf.cast(np.copy(in_walk[c]), 'float32')
            out_walk_c = tf.cast(np.copy(out_walk[c]), 'float32')
            total += step_mlp_norm(model_walk, in_walk_c, out_walk_c).numpy()
            num += 1
        if epoch_num % 50 == 0:
            t1 = time.time() - t0
            print("Time: {:.2f} Epoch {}: {:.5f}".format(t1, epoch_num, total / num))

    print("Done!")
#+END_SRC

#+RESULTS:
#+begin_example
L1
Time: 0.56 Epoch 0: 0.55028
Time: 14.65 Epoch 50: 0.32765
Time: 28.82 Epoch 100: 0.31289
Time: 42.96 Epoch 150: 0.30138
Time: 56.99 Epoch 200: 0.29653
Time: 71.20 Epoch 250: 0.29018
Time: 85.32 Epoch 300: 0.28652
Time: 99.47 Epoch 350: 0.28512
Time: 113.63 Epoch 400: 0.28257
Done!
L2
Time: 0.50 Epoch 0: 0.59178
Time: 14.67 Epoch 50: 0.42582
Time: 28.90 Epoch 100: 0.40969
Time: 43.12 Epoch 150: 0.40081
Time: 57.32 Epoch 200: 0.39469
Time: 71.36 Epoch 250: 0.38965
Time: 85.50 Epoch 300: 0.38575
Time: 99.71 Epoch 350: 0.38361
Time: 113.79 Epoch 400: 0.38017
Done!
L3
Time: 0.49 Epoch 0: 0.59255
Time: 14.25 Epoch 50: 0.45798
Time: 27.99 Epoch 100: 0.44214
Time: 41.74 Epoch 150: 0.43245
Time: 55.47 Epoch 200: 0.42671
Time: 69.20 Epoch 250: 0.42153
Time: 82.94 Epoch 300: 0.41498
Time: 96.73 Epoch 350: 0.41170
Time: 110.44 Epoch 400: 0.40693
Done!
R1
Time: 0.50 Epoch 0: 0.55748
Time: 14.04 Epoch 50: 0.38201
Time: 27.56 Epoch 100: 0.36783
Time: 41.08 Epoch 150: 0.35839
Time: 54.60 Epoch 200: 0.35012
Time: 68.18 Epoch 250: 0.34523
Time: 81.71 Epoch 300: 0.34107
Time: 95.18 Epoch 350: 0.33831
Time: 108.61 Epoch 400: 0.33562
Done!
R2
Time: 0.49 Epoch 0: 0.63669
Time: 14.21 Epoch 50: 0.47415
Time: 28.01 Epoch 100: 0.45342
Time: 41.77 Epoch 150: 0.44024
Time: 55.45 Epoch 200: 0.43203
Time: 69.16 Epoch 250: 0.42613
Time: 82.91 Epoch 300: 0.42207
Time: 96.55 Epoch 350: 0.41998
Time: 110.29 Epoch 400: 0.41674
Done!
R3
Time: 0.49 Epoch 0: 0.61333
Time: 14.24 Epoch 50: 0.44969
Time: 27.97 Epoch 100: 0.43206
Time: 41.69 Epoch 150: 0.42058
Time: 55.45 Epoch 200: 0.41480
Time: 69.19 Epoch 250: 0.40960
Time: 82.89 Epoch 300: 0.40572
Time: 96.64 Epoch 350: 0.40194
Time: 110.35 Epoch 400: 0.40083
Done!
#+end_example

** Saving the models

#+BEGIN_SRC jupyter-python
all_models = dict()
for leg, model_walk, xy_w in zip(legs, ms_walk, xy_ws):
    all_models[leg] = {
        'model_walk': model_walk.get_full(),
        'train': (xy_w, bnums),
        'test': (xy_w_test, bnums_test),
    }
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
outname = '/home/pierre/data/tuthill/models/models_sls/walk_sls_legs_6.pickle'
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
with open(outname, 'wb') as f:
    pickle.dump(all_models, f)
#+END_SRC

#+RESULTS:


** Loading the models

#+BEGIN_SRC jupyter-python
outname = '/home/pierre/data/tuthill/models/models_sls/walk_sls_legs_5.pickle'
with open(outname, 'rb') as f:
    all_models = pickle.load(f)

ms_walk = []
xy_ws = []
for leg in legs:
    d = all_models[leg]
    model_walk = MLPScaledXY.from_full(d['model_walk'])
    ms_walk.append(model_walk)
    xy_w, bnums = d['train']
    xy_ws.append(xy_w)
#+END_SRC

#+RESULTS:


** Evaluating the model

#+BEGIN_SRC jupyter-python
def update_state(ang, drv, phase, out, ratio=1.0):
    accel = out[:len(ang)]
    drv1 = drv + accel * ratio
    ang1 = ang + drv * ratio
    phase1 = phase + out[-1]*ratio
    return ang1, drv1, phase1
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
n_ang = len(angles_main)
common = Counter(bnums).most_common(100)
b, _ = common[0]

n_pred = 200

cc = np.where(b == bnums)[0][:n_pred]

preds = []

for leg, model_walk, xy_w in zip(legs, ms_walk, xy_ws):
    print(leg)
    real_ang = xy_w[0][cc, :n_ang]
    real_drv = xy_w[0][cc, n_ang:n_ang*2]
    rcos, rsin = xy_w[0][:, [-2, -1]][cc].T
    real_phase = np.arctan2(rsin, rcos)
    real_context = xy_w[0][cc, -5:-2]

    ang = real_ang[0]
    drv = real_drv[0]
    context = real_context
    pcos, psin = rcos[0], rsin[0]
    phase = np.arctan2(psin, pcos)

    pred_ang = np.zeros((n_pred, n_ang))
    pred_drv = np.zeros((n_pred, n_ang))
    pred_phase = np.zeros(n_pred)

    for i in range(n_pred):
      inp = np.hstack([ang, drv, context[i], np.cos(phase), np.sin(phase)])
      out = model_walk(inp[None].astype('float32'))[0].numpy()
      ang1, drv1, phase1 = update_state(ang, drv, phase, out, ratio=0.5)
      new_inp = np.hstack([ang1, drv1, context[i], np.cos(phase1), np.sin(phase1)])
      out = model_walk(new_inp[None].astype('float32'))[0].numpy()
      ang, drv, phase = update_state(ang, drv, phase, out, ratio=1.0)
      phase = np.mod(phase, 2*np.pi)
      # phase = np.mod(real_phase[i], 2*np.pi)
      pred_ang[i] = ang
      pred_drv[i] = drv
      pred_phase[i] = phase
    preds.append( (pred_ang, pred_drv, pred_phase, real_ang, real_drv, real_phase) )
#+END_SRC

#+RESULTS:
: L1
: L2
: L3
: R1
: R2
: R3



#+BEGIN_SRC jupyter-python
pred_ang, pred_drv, pred_phase, real_ang, real_drv, real_phase = preds[0]
plt.figure(figsize=(6, 9))
plt.subplot(211)
plt.plot(pred_ang)
plt.title('Simulated')
plt.ylabel('Angle (deg)')
# plt.ylim(20, 180)
plt.subplot(212)
plt.plot(real_ang)
plt.legend(labels=["femur-tibia flexion", "coxa rotation", "body-coxa flexion",
                   "coxa-femur flexion", "femur rotation"])
plt.title('Real')
plt.xlabel('Frame number')
plt.ylabel('Angle (deg)')
# plt.ylim(20, 180)

#+END_SRC

#+RESULTS:
:RESULTS:
: Text(0, 0.5, 'Angle (deg)')
[[file:./.ob-jupyter/e8059631b5b7a22484451862f19e7e3451a3277f.png]]
:END:

#+BEGIN_SRC jupyter-python
plt.figure(figsize=(6, 9))
plt.subplot(211)
plt.plot(pred_drv)
plt.title('Simulated')
plt.ylabel('Angle (deg)')
# plt.ylim(20, 180)
plt.subplot(212)
plt.plot(real_drv)
plt.legend(labels=["femur-tibia flexion", "body-coxa flexion", "coxa-femur flexion", "coxa-femur rotation"])
plt.title('Real')
plt.xlabel('Frame number')
plt.ylabel('Angle (deg)')
# plt.ylim(20, 180)
#+END_SRC

#+RESULTS:
:RESULTS:
: Text(0, 0.5, 'Angle (deg)')
[[file:./.ob-jupyter/5061a476474b98c8f52d63e0d3d1dd4494b81929.png]]
:END:



#+BEGIN_SRC jupyter-python
plt.figure(figsize=(7, 4))
plt.subplot(211)
# plt.plot(np.cos(pred_phase))
# plt.plot(np.sin(pred_phase))
plt.plot(np.mod(pred_phase, 2*np.pi))
plt.subplot(212)
plt.plot(np.mod(real_phase, 2*np.pi))
# plt.plot(np.cos(real_phase))
# plt.plot(np.sin(real_phase))
#+END_SRC

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7f3c576b8e50> |
[[file:./.ob-jupyter/0000711c3508d22a79a261ab554cbdcbb7928f82.png]]
:END:
* Simulating a kuramato oscillator model

#+BEGIN_SRC jupyter-python
offsets = np.array([
   [ 0.        , -3.05622153,  0.96192901,  3.05202358,  0.1960119 , -2.1399429 ],
   [ 3.05622153,  0.        , -2.16394489, -0.16563617, -3.03660191, 0.84328264],
   [-0.96192901,  2.16394489,  0.        ,  2.0077949 , -0.76128234, 3.10273806],
   [-3.05202358,  0.16563617, -2.0077949 ,  0.        , -2.86955919, 1.01551641],
   [-0.1960119 ,  3.03660191,  0.76128234,  2.86955919,  0.        , -2.29461826],
   [ 2.1399429 , -0.84328264, -3.10273806, -1.01551641,  2.29461826, 0.        ]
])


w_slope = 2.4327365550252393
w_intercept = 22.57654446861406
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
p0 = np.zeros(6)
# p0[:] = offsets[0] + np.random.randn(6)*1.0
p0[:] = np.random.randn(6)*2*np.pi
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
speedy = 10
w = w_slope * speedy + w_intercept
ws = np.ones(6) * w
alphas = np.ones((6,6))*1.0
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
def kuramato_deriv(px, alphas, offsets, ws):
    return ws + np.array([
        np.sum(alphas[i] * np.sin(px - px[i] - offsets[i]))
        for i in range(len(px))
    ])
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
dt = 1.0 / FPS

px = p0.copy()
full_px = [px]

for _ in range(600):
    # midpoint method update
    px_half = px + 0.5*dt * kuramato_deriv(px, alphas, offsets, ws)
    px_new = px + dt * kuramato_deriv(px_half, alphas, offsets, ws)
    # euler update
    # px_new = px + dt * kuramato_deriv(px, alphas, offsets, ws)
    px = px_new
    px = px + np.random.normal(size=px.shape)*dt*1.0
    full_px.append(px)

full_px = np.array(full_px)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
_ = plt.plot(np.mod(full_px - full_px[:,0:1] - offsets[0]+np.pi, 2*np.pi)-np.pi)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/166b5ff1628fdc1bae95575e2b9ea2d2ff9220e2.png]]

#+BEGIN_SRC jupyter-python
_ = plt.plot(np.sin(full_px)[:200])
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/c67f78101ba49087afcd200cbffc70df3e85dbc7.png]]

* Combining kuramato and legs models

** Run the model
#+BEGIN_SRC jupyter-python
p0 = np.zeros(6)
p0[:] = offsets[0] + np.random.randn(6)*1.0

speedy = 10
w = w_slope * speedy + w_intercept
ws = np.ones(6) * w
alphas = np.ones((6,6))*10.0
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
dt = 1.0 / FPS

px = p0.copy()
full_px = [px]

for _ in range(600):
    # midpoint method update
    px_half = px + 0.5*dt * kuramato_deriv(px, alphas, offsets, ws)
    px = px + dt * kuramato_deriv(px_half, alphas, offsets, ws)
    # noise
    px = px + np.random.normal(size=px.shape)*dt*1.0
    full_px.append(px)

full_px = np.array(full_px)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
n_ang = len(angles_main)
common = Counter(bnums).most_common(100)
b, _ = common[0]

n_legs = len(legs)
n_pred = 600

cc = np.where(b == bnums)[0][:n_pred]

# p0 = np.zeros(6)
# p0[:] = offsets[0] + np.random.randn(6)*1.0

alphas = np.ones((6,6))*1.0

preds = []

real_angs = []
real_drvs = []
real_phases = []


for xy_w in xy_ws:
    real_angs.append(xy_w[0][cc, :n_ang])
    real_drvs.append(xy_w[0][cc, n_ang:n_ang*2])
    rcos, rsin = xy_w[0][:, [-2, -1]][cc].T
    real_phases.append(np.arctan2(rsin, rcos))
    real_context = xy_w[0][cc, -5:-2]


angs = np.array([r[0] for r in real_angs])
drvs = np.array([r[0] for r in real_drvs])
phases = np.array([r[0] for r in real_phases])
context = real_context

px = phases

pred_ang = np.zeros((n_pred, n_legs, n_ang))
pred_drv = np.zeros((n_pred, n_legs, n_ang))
pred_phase = np.zeros((n_pred, n_legs))
pred_px = np.zeros((n_pred, n_legs))

for i in range(n_pred):
    w = w_slope * context[i, 0] + w_intercept
    # ws = np.ones(6) * w
    ws = np.zeros(6)

    # midpoint method update
    px_half = px + 0.5*dt * kuramato_deriv(px, alphas, offsets, ws)
    px = px + dt * kuramato_deriv(px_half, alphas, offsets, ws)
    # noise
    # px = px + np.random.normal(size=px.shape)*dt*1.0
    pred_px[i] = px

    for ix_leg in range(n_legs):
        model_walk = ms_walk[ix_leg]
        ang, drv, phase = angs[ix_leg], drvs[ix_leg], phases[ix_leg]

        phase = px[ix_leg]

        # midpoint method for leg model
        inp = np.hstack([ang, drv, context[i], np.cos(phase), np.sin(phase)])
        out = model_walk(inp[None].astype('float32'))[0].numpy()
        ang1, drv1, phase1 = update_state(ang, drv, phase, out, ratio=0.5)
        new_inp = np.hstack([ang1, drv1, context[i], np.cos(phase1), np.sin(phase1)])
        out = model_walk(new_inp[None].astype('float32'))[0].numpy()
        ang, drv, phase = update_state(ang, drv, phase, out, ratio=1.0)

        # phase = px[ix_leg]
        px[ix_leg] = phase
        # phase = np.mod(px[ix_leg], 2*np.pi)
        # phase = np.mod(phase, 2*np.pi)
        # phase = np.mod(real_phase[i], 2*np.pi)
        angs[ix_leg] = pred_ang[i, ix_leg] = ang
        drvs[ix_leg] = pred_drv[i, ix_leg] = drv
        phases[ix_leg] = pred_phase[i, ix_leg] = phase

#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
_ = plt.plot(np.mod(pred_ang[:, [1, 4], 4], 180))
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/6bf9a4ac4038b0ff616b778a9082a4c7a89b8c39.png]]

#+BEGIN_SRC jupyter-python
plt.plot(np.cos(pred_phase[:, [0, 1,4,5]]))
#+END_SRC

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7fd074e63040> | <matplotlib.lines.Line2D | at | 0x7fd074e63070> | <matplotlib.lines.Line2D | at | 0x7fd074e63190> | <matplotlib.lines.Line2D | at | 0x7fd074e632b0> |
[[file:./.ob-jupyter/b709d2abf8056ed4439df2a5a37dace2969dc641.png]]
:END:


#+BEGIN_SRC jupyter-python
_ = plt.plot(np.mod(pred_phase - pred_phase[:, 0:1]+np.pi - offsets[0], 2*np.pi) - np.pi)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/925f5df55da00ff6bacb4006bbf2efb1b4981140.png]]

** Plot the model

#+BEGIN_SRC jupyter-python
import importlib
import angle_functions
importlib.reload(angle_functions)
#+END_SRC

#+RESULTS:
: <module 'angle_functions' from '/jellyfish/research/tuthill/walking-stats-3d/org/angle_functions.py'>

#+BEGIN_SRC jupyter-python
# dd = data.loc[data['fictrac_delta_rot_lab_y_mms'] < -2]

#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
real_ang_shaped = np.array(real_angs).swapaxes(0, 1)

angnames = np.hstack(all_angles_main)
angs = pred_ang.reshape(pred_ang.shape[0], -1)
# angs = real_ang_shaped.reshape(real_ang_shaped.shape[0], -1)
new_angs = np.tile(angle_functions.median_angles, (angs.shape[0], 1))

for ix_source, name in enumerate(angnames):
    ix_dest = angle_functions.name_to_index[name]
    new_angs[:, ix_dest] = angs[:, ix_source]

pose_3d = angle_functions.angles_to_pose_multirow(new_angs)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import skvideo.io
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
# outname = 'vids/combined_model_real_2.mp4'
outname = 'vids/combined_model_test_5.mp4'

writer = skvideo.io.FFmpegWriter(outname, inputdict={
        '-framerate': str(30.0),
    }, outputdict={
        '-vcodec': 'h264'
    })


fig = plt.figure(1, figsize=(4, 4), dpi=200)
fig.clf()
ax = fig.add_subplot(1, 1, 1, projection='3d')

for i in trange(pose_3d.shape[0]):
    ax.cla()
    X_p = pose_3d[i]
    for xyz in X_p:
        ax.plot(xyz[:, 0], xyz[:, 1], xyz[:, 2], marker='o', markersize=4)
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    ax.set_zlim(-1, 1)
    plt.draw()
    img = np.array(fig.canvas.renderer._renderer).copy()
    writer.writeFrame(img)

writer.close()
#+END_SRC

#+RESULTS:
:RESULTS:
: 100%|██████████| 600/600 [00:27<00:00, 21.69it/s]
[[file:./.ob-jupyter/d805c0cfb9ad10297af2c53601b92af2cb315c73.png]]
:END:
