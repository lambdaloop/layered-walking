#+TITLE: Perturbation intro plots

* Goal

The goal of this notebook is to make plots for the perturbation figure of the paper. Namely:
- Example perturbed trajectories
- Demo plots for quantifying the likelihood of walking
- Speed vs perturbation strength plot

This is for Figure 4 of the paper

The notebook should be set up so that running it from top to bottom makes all the figure sublayouts.

* Setup

#+BEGIN_SRC jupyter-python
project_path = "/home/lili/research/tuthill/layered-walking"
data_path = '/home/lili/data/tuthill/models/sls_runs'
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
import numpy as np
import statsmodels.api as sm
from statsmodels.sandbox.regression.predstd import wls_prediction_std
import matplotlib.pyplot as plt
import os
from tqdm import tqdm, trange
import pandas as pd
from scipy import signal
from scipy.stats import gaussian_kde
from sklearn.decomposition import PCA
from glob import glob
import pickle
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
import sys
sys.path.append(project_path)
from tools.angle_functions import anglesTG as angle_names_1leg
from tools.angle_functions import legs
from tools.angle_functions import make_fly_video, angles_to_pose_names
from tools.trajgen_tools import WalkingData
from tools.dist_tools import DistType
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

plt.style.use('default')
plt.rcParams['figure.figsize'] = (7.5, 2)
#+END_SRC


#+RESULTS:

#+BEGIN_SRC jupyter-python
xvals = np.linspace(-np.pi, np.pi)
def get_phase(ang):
    m = np.median(ang, axis=0)
    s = np.std(ang, axis=0)
    s[s == 0] = 1
    dm = (ang - m) / s
    phase = np.arctan2(-dm[:,1], dm[:,0])
    return phase

def phase_align_poly(ang, extra=None, order=5):
    topredict = ang
    if extra is not None:
        topredict = np.hstack([ang, extra])
    means = np.full((len(xvals), topredict.shape[1]), np.nan)
    stds = np.full((len(xvals), topredict.shape[1]), np.nan)
    if len(ang) < 50: # not enough data
        return means, stds
    phase = get_phase(ang)
    # pcs = np.vstack([np.cos(phase), np.sin(phase)]).T
    b = np.vstack([np.cos(i * phase + j) for i in range(order) for j in [0, np.pi/2]]).T
    xcs = np.vstack([np.cos(i * xvals + j) for i in range(order) for j in [0, np.pi/2]]).T
    for i in range(topredict.shape[1]):
        cc = np.isfinite(topredict[:,i])
        model = sm.OLS(topredict[cc,i], b[cc]).fit()
        means[:,i] = model.predict(xcs)
        s, upper,lower = wls_prediction_std(model, xcs)
        stds[:,i] = s
    return means, stds

#+END_SRC

#+RESULTS:

In this notebook, we only load the actuation delays of 30ms, and sensory delays of 10ms (built-in for this dataset).

#+BEGIN_SRC jupyter-python
fname_pat = os.path.join(data_path, 'delays_stats_subang_v9_actuate_*.pkl')
fnames = sorted(glob(fname_pat))

conditions = []
angles = []
derivs = []
accels = []

for fname in tqdm(fnames, ncols=70):
    # d = np.load(fname, allow_pickle=True)
    with open(fname, 'rb') as f:
        d = pickle.load(f)

    angle_names = d['angleNames'][0]

    for i, cond in enumerate(d['conditions']):
        if not np.isclose(cond['actDelay'], 0.030):
            continue
        ang = d['angle'][i]
        deriv = signal.savgol_filter(ang, 5, 2, deriv=1, axis=0)
        accel = signal.savgol_filter(deriv, 5, 2, deriv=1, axis=0)
        conditions.append(cond)
        angles.append(ang)
        derivs.append(deriv)
        accels.append(accel)
#+END_SRC

#+RESULTS:
: 100%|███████████████████████████████| 132/132 [22:52<00:00, 10.40s/it]
:




#+BEGIN_SRC jupyter-python

speeds = np.array([x['context'] for x in conditions])
dist_types = np.array([x['dist'].value for x in conditions])
act_delays = np.array([x['actDelay'] for x in conditions])
max_velocities = np.array([x['maxVelocity'] for x in conditions])
angle_names = list(angle_names)

#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
perturb_ranges = {
    'before': (0, 300),
    'during': (300, 600),
    'after': (600, 900)
}
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python :results scalar
conditions[:5]
#+END_SRC

#+RESULTS:
#+begin_example
  [{'context': [6, 0, 0],
    'offset': 0,
    'dist': <DistType.IMPULSE: 7>,
    'maxVelocity': 0.0,
    'actDelay': 0.03},
   {'context': [6, 0, 0],
    'offset': 1,
    'dist': <DistType.IMPULSE: 7>,
    'maxVelocity': 0.0,
    'actDelay': 0.03},
   {'context': [6, 0, 0],
    'offset': 2,
    'dist': <DistType.IMPULSE: 7>,
    'maxVelocity': 0.0,
    'actDelay': 0.03},
   {'context': [6, 0, 0],
    'offset': 3,
    'dist': <DistType.IMPULSE: 7>,
    'maxVelocity': 0.0,
    'actDelay': 0.03},
   {'context': [6, 0, 0],
    'offset': 0,
    'dist': <DistType.IMPULSE: 7>,
    'maxVelocity': 1.25,
    'actDelay': 0.03}]
#+end_example


#+BEGIN_SRC jupyter-python
fname = '/home/lili/data/tuthill/models/models_sls/data_subang_5.pickle'
wd = WalkingData(fname)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
wd.bout_context
#+END_SRC

#+RESULTS:
: array([[  4.246732  ,   0.7071299 ,   0.3955671 ],
:        [  2.5441482 ,   3.387733  ,   1.0246041 ],
:        [  2.3452914 ,  -0.44610858,  -0.20245193],
:        ...,
:        [  6.904698  ,   3.0903168 ,   3.0456958 ],
:        [  5.8905787 ,  -4.7177234 ,   1.9700806 ],
:        [  8.232974  , -12.293827  ,  -0.86852646]], dtype=float32)

#+BEGIN_SRC jupyter-python
fancy_angle_names = {
    'C_flex': 'femur-tibia\nflexion',
    'A_rot': 'coxa\nrotation',
    'A_abduct': 'body-coxa\nflexion',
    'B_flex': 'coxa-femur\nflexion',
    'B_rot': 'femur\nrotation'
}
#+END_SRC

#+RESULTS:


* Example time series

For the example plots, we want to show a few speeds with impulse and poisson perturbations.

I think we talked about reorganizing these figures. I think actually it would help me to have a better sense of what to plot to draw a sketch of the remaining figures.
Then I can focus on implementing them in this and other notebooks


#+BEGIN_SRC jupyter-python
plot_speeds = [[8, 0, 0], [10, 0, 0], [12, 0, 0]]
#+END_SRC

#+RESULTS:



#+BEGIN_SRC jupyter-python
angnames = ['R1C_flex', 'L2B_rot']
dists = ['poisson', 'impulse']
dist_values = {'poisson': DistType.POISSON_GAUSSIAN.value,
               'impulse': DistType.IMPULSE.value}

for dist in dists:
    dist_value = dist_values[dist]
    for angname in angnames:
        ix_ang = angle_names.index(angname)

        plt.figure(figsize=(5.5, 2))
        for i in range(len(plot_speeds)):
            plt.subplot(3, 1, i+1)
            ixs = np.where(np.all(speeds == plot_speeds[i], axis=1)
                           & (dist_types == dist_value)
                           & np.isclose(act_delays, 0.030))[0]
            ix_bout = ixs[15]
            print(conditions[ix_bout])
            ang = angles[ix_bout][:, ix_ang]
            t = np.arange(len(ang))/300.0
            plt.plot(t, ang)
            plt.axvline(t[300], color='gray', linestyle='dotted')
            plt.axvline(t[600], color='gray', linestyle='dotted')
            plt.ylim(10, 180)
            plt.yticks([60, 120])
            if i != 2:
                plt.xticks(ticks=[])

        sns.despine(bottom=True)
        plt.ylabel("Angle (deg)")
        plt.xlabel("Time (s)")

        plt.savefig('plots/perturb_intro_trace_{}_{}.pdf'.format(angname, dist),
                    bbox_inches = "tight")
#+END_SRC

#+RESULTS:
: d9d10fc0-8e9d-4ee0-aa90-dc18986ff28d


* principal component metric

#+BEGIN_SRC jupyter-python

full_L = []
bnums = wd._get_minlen_bnums(300)
for bnum in bnums:
    bout = wd.get_bnum(bnum)
    angs = np.hstack([bout['angles'][leg] for leg in legs])
    full_L.append(angs)
full = np.vstack(full_L)

full_sc = np.hstack([np.sin(np.deg2rad(full)),
                     np.cos(np.deg2rad(full))])

pca = PCA(n_components=2)
pcs = pca.fit_transform(full_sc)

subixs = np.random.choice(pcs.shape[0], size=100000, replace=False)
kde = gaussian_kde(pcs[subixs,:2].T)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
pcs = pca.transform(full_sc)
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
plt.figure(figsize=(4, 4))
plt.scatter(pcs[:,0], pcs[:,1], s=1, alpha=0.01)
plt.xlim(-1.0, 1.0)
plt.ylim(-1.0, 1.0)
plt.savefig('plots/demo_pca.pdf', bbox_inches='tight')
#+END_SRC

#+RESULTS:
[[./.ob-jupyter/a5b730f602cb87c21674a658c17849b1d4de4883.png]]


#+BEGIN_SRC jupyter-python
xgrid = np.linspace(-1.0, 1.0, 200)
ygrid = np.linspace(-1.0, 1.0, 200)
X, Y = np.meshgrid(xgrid, ygrid)
positions = np.vstack([X.ravel(), Y.ravel()])

# Evaluate the KDE at each point on the grid
Z = np.reshape(kde.logpdf(positions).T, X.shape)

# Create the contour plot
plt.figure(figsize=(4.8,4))
norm = plt.Normalize(vmin=-2, vmax=0)
cmap = plt.get_cmap('viridis')
mappable = plt.cm.ScalarMappable(norm, cmap)
CS = plt.contourf(X, Y, Z, cmap='viridis', levels=100, norm=norm)
plt.colorbar(mappable)

# Add labels and title
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Contour Plot of KDE')
plt.savefig('plots/kde_plot.pdf', bbox_inches = "tight")
#+END_SRC

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_1155682/1223795816.py:15: MatplotlibDeprecationWarning: Unable to determine Axes to steal space for Colorbar. Using gca(), but will raise in the future. Either provide the *cax* argument to use as the Axes for the Colorbar, provide the *ax* argument to steal space from it, or add *mappable* to an Axes.
:   plt.colorbar(mappable)
[[./.ob-jupyter/d1594b9e25e8ef37a91f6b7084315fdfcd01d5e9.png]]
:END:




#+BEGIN_SRC jupyter-python
ix_bout = 1000
print(conditions[ix_bout])
ang = angles[ix_bout]
ang_sc = np.hstack([np.sin(np.deg2rad(ang)),
                    np.cos(np.deg2rad(ang))])

pcs = pca.transform(ang_sc)

plt.subplot(1, 3, 1)
plt.plot(pcs[:300,0], pcs[:300,1])
plt.xlim(-1.2, 1.2)
plt.ylim(-1.2, 1.2)
plt.subplot(1, 3, 2)
plt.plot(pcs[300:600,0], pcs[300:600,1])
plt.xlim(-1.2, 1.2)
plt.ylim(-1.2, 1.2)
plt.subplot(1, 3, 3)
plt.plot(pcs[600:,0], pcs[600:,1])
plt.xlim(-1.2, 1.2)
plt.ylim(-1.2, 1.2)

pdfs = kde.logpdf(pcs[:, :2].T)
# plt.plot(pdfs)

print(np.sum(pdfs[0:300]))
print(np.sum(pdfs[300:600]))
print(np.sum(pdfs[600:900]))

plt.figure()
plt.plot(ang)

plt.figure()
plt.plot(pdfs)

#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mIndexError[0m                                Traceback (most recent call last)
: Cell [0;32mIn[91], line 2[0m
: [1;32m      1[0m ix_bout [38;5;241m=[39m [38;5;241m1000[39m
: [0;32m----> 2[0m [38;5;28mprint[39m([43mconditions[49m[43m[[49m[43mix_bout[49m[43m][49m)
: [1;32m      3[0m ang [38;5;241m=[39m angles[ix_bout]
: [1;32m      4[0m ang_sc [38;5;241m=[39m np[38;5;241m.[39mhstack([np[38;5;241m.[39msin(np[38;5;241m.[39mdeg2rad(ang)),
: [1;32m      5[0m                     np[38;5;241m.[39mcos(np[38;5;241m.[39mdeg2rad(ang))])
:
: [0;31mIndexError[0m: list index out of range
:END:


* speed vs perturbation strength plots

#+BEGIN_SRC jupyter-python

#+END_SRC

#+RESULTS:




First we map out the logpdf of each bout.

#+BEGIN_SRC jupyter-python

  angles_sc = np.dstack([np.sin(np.deg2rad(angles)),
                         np.cos(np.deg2rad(angles))])

  angles_sc_flat = angles_sc.reshape(-1, angles_sc.shape[-1])

  pcs = np.full((angles_sc_flat.shape[0], 2), np.nan)
  good = np.all(np.isfinite(angles_sc_flat), axis=1)
  pcs[good] = pca.transform(angles_sc_flat[good])
  # pcs = pca.transform(angles_sc_flat)

  pdfs_flat = np.full(len(pcs), np.nan)
  step = 500
  for i in trange(0, len(pcs), step, ncols=70):
      check = np.all(np.isfinite(pcs[i:i+step]), axis=1)
      pdfs_flat[i:i+step][check] = kde.logpdf(pcs[i:i+step, :2][check].T)

  pdfs_shaped = pdfs_flat.reshape(angles_sc.shape[:2])
#+END_SRC

#+RESULTS:
:  49%|███████████████▏               | 446/908 [06:36<04:50,  1.59it/s]

** plot for continuous perturbation
#+BEGIN_SRC jupyter-python
before = np.nanmean(pdfs_shaped[:, :300], axis=1)
during = np.nanmean(pdfs_shaped[:, 300:600], axis=1)
after = np.nanmean(pdfs_shaped[:, 600:900], axis=1)

# plt.plot(before)
# plt.plot(during - before)
plt.plot(after - before)
#+END_SRC

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_1138594/2901933554.py:3: RuntimeWarning: Mean of empty slice
:   after = np.nanmean(pdfs_shaped[:, 600:900], axis=1)
| <matplotlib.lines.Line2D | at | 0x7f792dc93ca0> |
[[./.ob-jupyter/c0a8d8d6fbd5eea10c725694aa0e11c33e98b0fd.png]]
:END:


#+BEGIN_SRC jupyter-python
dd = pd.DataFrame({"delay": act_delays,
                   "dist": dist_types,
                   "forward_speed": speeds[:, 0],
                   "perturbation": max_velocities,
                   "during_logpdf": during,
                   "after_logpdf": after,
                   "during_diff_logpdf": during-before,
                   "after_diff_logpdf": after-before,
                   "before_logpdf": before})

dsub = dd[dd['dist'] == DistType.POISSON_GAUSSIAN.value]
dgroup = dsub.groupby(['forward_speed', 'perturbation']).mean()


#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mValueError[0m                                Traceback (most recent call last)
  Cell [0;32mIn[196], line 1[0m
  [0;32m----> 1[0m dd [38;5;241m=[39m [43mpd[49m[38;5;241;43m.[39;49m[43mDataFrame[49m[43m([49m[43m{[49m[38;5;124;43m"[39;49m[38;5;124;43mdelay[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mact_delays[49m[43m,[49m
  [1;32m      2[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mdist[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mdist_types[49m[43m,[49m
  [1;32m      3[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mforward_speed[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mspeeds[49m[43m[[49m[43m:[49m[43m,[49m[43m [49m[38;5;241;43m0[39;49m[43m][49m[43m,[49m
  [1;32m      4[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mperturbation[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mmax_velocities[49m[43m,[49m
  [1;32m      5[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mduring_logpdf[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mduring[49m[43m,[49m
  [1;32m      6[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mafter_logpdf[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mafter[49m[43m,[49m
  [1;32m      7[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mduring_diff_logpdf[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mduring[49m[38;5;241;43m-[39;49m[43mbefore[49m[43m,[49m
  [1;32m      8[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mafter_diff_logpdf[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mafter[49m[38;5;241;43m-[39;49m[43mbefore[49m[43m,[49m
  [1;32m      9[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mbefore_logpdf[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mbefore[49m[43m}[49m[43m)[49m
  [1;32m     11[0m dsub [38;5;241m=[39m dd[dd[[38;5;124m'[39m[38;5;124mdist[39m[38;5;124m'[39m] [38;5;241m==[39m DistType[38;5;241m.[39mPOISSON_GAUSSIAN[38;5;241m.[39mvalue]
  [1;32m     12[0m dgroup [38;5;241m=[39m dsub[38;5;241m.[39mgroupby([[38;5;124m'[39m[38;5;124mforward_speed[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mperturbation[39m[38;5;124m'[39m])[38;5;241m.[39mmean()

  File [0;32m/home/pierre/miniconda3/envs/layered/lib/python3.9/site-packages/pandas/core/frame.py:664[0m, in [0;36mDataFrame.__init__[0;34m(self, data, index, columns, dtype, copy)[0m
  [1;32m    658[0m     mgr [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_init_mgr(
  [1;32m    659[0m         data, axes[38;5;241m=[39m{[38;5;124m"[39m[38;5;124mindex[39m[38;5;124m"[39m: index, [38;5;124m"[39m[38;5;124mcolumns[39m[38;5;124m"[39m: columns}, dtype[38;5;241m=[39mdtype, copy[38;5;241m=[39mcopy
  [1;32m    660[0m     )
  [1;32m    662[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(data, [38;5;28mdict[39m):
  [1;32m    663[0m     [38;5;66;03m# GH#38939 de facto copy defaults to False only in non-dict cases[39;00m
  [0;32m--> 664[0m     mgr [38;5;241m=[39m [43mdict_to_mgr[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mindex[49m[43m,[49m[43m [49m[43mcolumns[49m[43m,[49m[43m [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mdtype[49m[43m,[49m[43m [49m[43mcopy[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m,[49m[43m [49m[43mtyp[49m[38;5;241;43m=[39;49m[43mmanager[49m[43m)[49m
  [1;32m    665[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(data, ma[38;5;241m.[39mMaskedArray):
  [1;32m    666[0m     [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m[38;5;21;01m.[39;00m[38;5;21;01mma[39;00m[38;5;21;01m.[39;00m[38;5;21;01mmrecords[39;00m [38;5;28;01mas[39;00m [38;5;21;01mmrecords[39;00m

  File [0;32m/home/pierre/miniconda3/envs/layered/lib/python3.9/site-packages/pandas/core/internals/construction.py:493[0m, in [0;36mdict_to_mgr[0;34m(data, index, columns, dtype, typ, copy)[0m
  [1;32m    489[0m     [38;5;28;01melse[39;00m:
  [1;32m    490[0m         [38;5;66;03m# dtype check to exclude e.g. range objects, scalars[39;00m
  [1;32m    491[0m         arrays [38;5;241m=[39m [x[38;5;241m.[39mcopy() [38;5;28;01mif[39;00m [38;5;28mhasattr[39m(x, [38;5;124m"[39m[38;5;124mdtype[39m[38;5;124m"[39m) [38;5;28;01melse[39;00m x [38;5;28;01mfor[39;00m x [38;5;129;01min[39;00m arrays]
  [0;32m--> 493[0m [38;5;28;01mreturn[39;00m [43marrays_to_mgr[49m[43m([49m[43marrays[49m[43m,[49m[43m [49m[43mcolumns[49m[43m,[49m[43m [49m[43mindex[49m[43m,[49m[43m [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mdtype[49m[43m,[49m[43m [49m[43mtyp[49m[38;5;241;43m=[39;49m[43mtyp[49m[43m,[49m[43m [49m[43mconsolidate[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m)[49m

  File [0;32m/home/pierre/miniconda3/envs/layered/lib/python3.9/site-packages/pandas/core/internals/construction.py:118[0m, in [0;36marrays_to_mgr[0;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)[0m
  [1;32m    115[0m [38;5;28;01mif[39;00m verify_integrity:
  [1;32m    116[0m     [38;5;66;03m# figure out the index, if necessary[39;00m
  [1;32m    117[0m     [38;5;28;01mif[39;00m index [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
  [0;32m--> 118[0m         index [38;5;241m=[39m [43m_extract_index[49m[43m([49m[43marrays[49m[43m)[49m
  [1;32m    119[0m     [38;5;28;01melse[39;00m:
  [1;32m    120[0m         index [38;5;241m=[39m ensure_index(index)

  File [0;32m/home/pierre/miniconda3/envs/layered/lib/python3.9/site-packages/pandas/core/internals/construction.py:666[0m, in [0;36m_extract_index[0;34m(data)[0m
  [1;32m    664[0m lengths [38;5;241m=[39m [38;5;28mlist[39m([38;5;28mset[39m(raw_lengths))
  [1;32m    665[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(lengths) [38;5;241m>[39m [38;5;241m1[39m:
  [0;32m--> 666[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m"[39m[38;5;124mAll arrays must be of the same length[39m[38;5;124m"[39m)
  [1;32m    668[0m [38;5;28;01mif[39;00m have_dicts:
  [1;32m    669[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
  [1;32m    670[0m         [38;5;124m"[39m[38;5;124mMixing dicts with non-Series may lead to ambiguous ordering.[39m[38;5;124m"[39m
  [1;32m    671[0m     )

  [0;31mValueError[0m: All arrays must be of the same length
#+end_example
:END:


#+BEGIN_SRC jupyter-python
to_plot  = [("during - before perturbations", "during_diff_logpdf"),
            ("after - before perturbations", "after_diff_logpdf"),
            ("before perturbations", "before_logpdf"),
            ("during perturbations", "during_logpdf"),
            ("after perturbations", "after_logpdf")
            ]


for (name, key) in to_plot:
    dimg = dgroup.reset_index().pivot(columns='perturbation', index='forward_speed', values=key)
    plt.close('all')
    plt.figure(figsize=(6, 3), dpi=200)
    if "diff" in key:
        plt.imshow(dimg, vmin=-2, vmax=0)
    else:
        plt.imshow(dimg, vmin=-2, vmax=-1.2)

    ax = plt.gca()
    ax.set_xticks(np.arange(len(dimg.columns)), labels=dimg.columns)
    ax.set_yticks(np.arange(len(dimg.index)), labels=np.int32(dimg.index))

    ax.invert_yaxis()

    ax.set_xlabel("Perturbation strength")
    ax.set_ylabel("Speed (mm/s)")

    plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
             rotation_mode="anchor")

    plt.colorbar()
    plt.title(name)

    plt.savefig('plots/fig_speeds_perturbation_continuous_logpdf_{}.pdf'.format(key), bbox_inches = "tight")

#+END_SRC

#+RESULTS:
[[./.ob-jupyter/7ac6251f60dffbbe374db822c674a8d014ad8e90.png]]




** plot for impulse perturbation
#+BEGIN_SRC jupyter-python
before = np.nanmean(pdfs_shaped[:, :300], axis=1)
during = np.nanmean(pdfs_shaped[:, 305:400], axis=1)
after = np.nanmean(pdfs_shaped[:, 400:900], axis=1)

# plt.plot(before)
# plt.plot(during - before)
plt.plot(during)
#+END_SRC

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_1138594/3091638959.py:3: RuntimeWarning: Mean of empty slice
:   after = np.nanmean(pdfs_shaped[:, 400:900], axis=1)
| <matplotlib.lines.Line2D | at | 0x7f792d8452b0> |
[[./.ob-jupyter/a6db71614b5465c554dc0d4a26e53b668ed0a2fc.png]]
:END:


#+BEGIN_SRC jupyter-python
dd = pd.DataFrame({"delay": act_delays,
                   "dist": dist_types,
                   "forward_speed": speeds[:, 0],
                   "perturbation": max_velocities,
                   "during_logpdf": during,
                   "after_logpdf": after,
                   "during_diff_logpdf": during-before,
                   "after_diff_logpdf": after-before,
                   "before_logpdf": before})

dsub = dd[dd['dist'] == DistType.IMPULSE.value]
dgroup = dsub.groupby(['forward_speed', 'perturbation']).mean()


#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mValueError[0m                                Traceback (most recent call last)
  Cell [0;32mIn[199], line 1[0m
  [0;32m----> 1[0m dd [38;5;241m=[39m [43mpd[49m[38;5;241;43m.[39;49m[43mDataFrame[49m[43m([49m[43m{[49m[38;5;124;43m"[39;49m[38;5;124;43mdelay[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mact_delays[49m[43m,[49m
  [1;32m      2[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mdist[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mdist_types[49m[43m,[49m
  [1;32m      3[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mforward_speed[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mspeeds[49m[43m[[49m[43m:[49m[43m,[49m[43m [49m[38;5;241;43m0[39;49m[43m][49m[43m,[49m
  [1;32m      4[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mperturbation[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mmax_velocities[49m[43m,[49m
  [1;32m      5[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mduring_logpdf[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mduring[49m[43m,[49m
  [1;32m      6[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mafter_logpdf[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mafter[49m[43m,[49m
  [1;32m      7[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mduring_diff_logpdf[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mduring[49m[38;5;241;43m-[39;49m[43mbefore[49m[43m,[49m
  [1;32m      8[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mafter_diff_logpdf[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mafter[49m[38;5;241;43m-[39;49m[43mbefore[49m[43m,[49m
  [1;32m      9[0m [43m                   [49m[38;5;124;43m"[39;49m[38;5;124;43mbefore_logpdf[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mbefore[49m[43m}[49m[43m)[49m
  [1;32m     11[0m dsub [38;5;241m=[39m dd[dd[[38;5;124m'[39m[38;5;124mdist[39m[38;5;124m'[39m] [38;5;241m==[39m DistType[38;5;241m.[39mIMPULSE[38;5;241m.[39mvalue]
  [1;32m     12[0m dgroup [38;5;241m=[39m dsub[38;5;241m.[39mgroupby([[38;5;124m'[39m[38;5;124mforward_speed[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mperturbation[39m[38;5;124m'[39m])[38;5;241m.[39mmean()

  File [0;32m/home/pierre/miniconda3/envs/layered/lib/python3.9/site-packages/pandas/core/frame.py:664[0m, in [0;36mDataFrame.__init__[0;34m(self, data, index, columns, dtype, copy)[0m
  [1;32m    658[0m     mgr [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_init_mgr(
  [1;32m    659[0m         data, axes[38;5;241m=[39m{[38;5;124m"[39m[38;5;124mindex[39m[38;5;124m"[39m: index, [38;5;124m"[39m[38;5;124mcolumns[39m[38;5;124m"[39m: columns}, dtype[38;5;241m=[39mdtype, copy[38;5;241m=[39mcopy
  [1;32m    660[0m     )
  [1;32m    662[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(data, [38;5;28mdict[39m):
  [1;32m    663[0m     [38;5;66;03m# GH#38939 de facto copy defaults to False only in non-dict cases[39;00m
  [0;32m--> 664[0m     mgr [38;5;241m=[39m [43mdict_to_mgr[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mindex[49m[43m,[49m[43m [49m[43mcolumns[49m[43m,[49m[43m [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mdtype[49m[43m,[49m[43m [49m[43mcopy[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m,[49m[43m [49m[43mtyp[49m[38;5;241;43m=[39;49m[43mmanager[49m[43m)[49m
  [1;32m    665[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(data, ma[38;5;241m.[39mMaskedArray):
  [1;32m    666[0m     [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m[38;5;21;01m.[39;00m[38;5;21;01mma[39;00m[38;5;21;01m.[39;00m[38;5;21;01mmrecords[39;00m [38;5;28;01mas[39;00m [38;5;21;01mmrecords[39;00m

  File [0;32m/home/pierre/miniconda3/envs/layered/lib/python3.9/site-packages/pandas/core/internals/construction.py:493[0m, in [0;36mdict_to_mgr[0;34m(data, index, columns, dtype, typ, copy)[0m
  [1;32m    489[0m     [38;5;28;01melse[39;00m:
  [1;32m    490[0m         [38;5;66;03m# dtype check to exclude e.g. range objects, scalars[39;00m
  [1;32m    491[0m         arrays [38;5;241m=[39m [x[38;5;241m.[39mcopy() [38;5;28;01mif[39;00m [38;5;28mhasattr[39m(x, [38;5;124m"[39m[38;5;124mdtype[39m[38;5;124m"[39m) [38;5;28;01melse[39;00m x [38;5;28;01mfor[39;00m x [38;5;129;01min[39;00m arrays]
  [0;32m--> 493[0m [38;5;28;01mreturn[39;00m [43marrays_to_mgr[49m[43m([49m[43marrays[49m[43m,[49m[43m [49m[43mcolumns[49m[43m,[49m[43m [49m[43mindex[49m[43m,[49m[43m [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mdtype[49m[43m,[49m[43m [49m[43mtyp[49m[38;5;241;43m=[39;49m[43mtyp[49m[43m,[49m[43m [49m[43mconsolidate[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m)[49m

  File [0;32m/home/pierre/miniconda3/envs/layered/lib/python3.9/site-packages/pandas/core/internals/construction.py:118[0m, in [0;36marrays_to_mgr[0;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)[0m
  [1;32m    115[0m [38;5;28;01mif[39;00m verify_integrity:
  [1;32m    116[0m     [38;5;66;03m# figure out the index, if necessary[39;00m
  [1;32m    117[0m     [38;5;28;01mif[39;00m index [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
  [0;32m--> 118[0m         index [38;5;241m=[39m [43m_extract_index[49m[43m([49m[43marrays[49m[43m)[49m
  [1;32m    119[0m     [38;5;28;01melse[39;00m:
  [1;32m    120[0m         index [38;5;241m=[39m ensure_index(index)

  File [0;32m/home/pierre/miniconda3/envs/layered/lib/python3.9/site-packages/pandas/core/internals/construction.py:666[0m, in [0;36m_extract_index[0;34m(data)[0m
  [1;32m    664[0m lengths [38;5;241m=[39m [38;5;28mlist[39m([38;5;28mset[39m(raw_lengths))
  [1;32m    665[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(lengths) [38;5;241m>[39m [38;5;241m1[39m:
  [0;32m--> 666[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m"[39m[38;5;124mAll arrays must be of the same length[39m[38;5;124m"[39m)
  [1;32m    668[0m [38;5;28;01mif[39;00m have_dicts:
  [1;32m    669[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
  [1;32m    670[0m         [38;5;124m"[39m[38;5;124mMixing dicts with non-Series may lead to ambiguous ordering.[39m[38;5;124m"[39m
  [1;32m    671[0m     )

  [0;31mValueError[0m: All arrays must be of the same length
#+end_example
:END:


#+BEGIN_SRC jupyter-python
to_plot  = [("during - before perturbations", "during_diff_logpdf"),
            ("after - before perturbations", "after_diff_logpdf"),
            ("before perturbations", "before_logpdf"),
            ("during perturbations", "during_logpdf"),
            ("after perturbations", "after_logpdf")
            ]


for (name, key) in to_plot:
    dimg = dgroup.reset_index().pivot(columns='perturbation', index='forward_speed', values=key)
    plt.figure(figsize=(6, 3), dpi=200)
    plt.imshow(dimg)
    if "diff" in key:
        plt.imshow(dimg, vmin=-2, vmax=0)
    else:
        plt.imshow(dimg, vmin=-2, vmax=-1)

    ax = plt.gca()
    ax.set_xticks(np.arange(len(dimg.columns)), labels=dimg.columns)
    ax.set_yticks(np.arange(len(dimg.index)), labels=np.int32(dimg.index))

    ax.invert_yaxis()

    ax.set_xlabel("Perturbation strength")
    ax.set_ylabel("Speed (mm/s)")

    plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
             rotation_mode="anchor")

    plt.colorbar()
    plt.title(name)

    plt.savefig('plots/fig_speeds_perturbation_impulse_logpdf_{}.pdf'.format(key), bbox_inches = "tight")

#+END_SRC

#+RESULTS:
:RESULTS:
[[./.ob-jupyter/2fc9520a52a7ecba9ef132ba136a872d560b1c1e.png]]
[[./.ob-jupyter/751d81530edc6253108008007c423c2551d73f2b.png]]
[[./.ob-jupyter/88d0799a771cbd4c0067441debfd0e89e043ef6e.png]]
[[./.ob-jupyter/73dfe076b388a5e03baa602c0f021ca7378b5c67.png]]
[[./.ob-jupyter/282d338653bfb82206c2627635f4657ba274e5b8.png]]
:END:


#+BEGIN_SRC jupyter-python
plt.scatter(pcs[:,0], pcs[:,1], s=1, alpha=0.1)

#+END_SRC

#+RESULTS:
:RESULTS:
: <matplotlib.collections.PathCollection at 0x7f792d804070>
[[./.ob-jupyter/cceef9a9177af4cc8038c1843dfe76bf5462621a.png]]
:END:
