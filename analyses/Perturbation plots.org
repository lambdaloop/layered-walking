#+TITLE: Perturbation plots

* Goal

The goal of this notebook is to make plots for the perturbation figure of the paper. Namely:
- Example perturbed trajectories
- Phase angle plot comparisons during/after vs no perturb
- Phase coupling within a leg
- Phase coupling across legs
- Step frequency distributions
- Demo videos

The network should be set up so that running it from top to bottom makes all the figure sublayouts.

* Setup

#+BEGIN_SRC jupyter-python
import numpy as np
import statsmodels.api as sm
from statsmodels.sandbox.regression.predstd import wls_prediction_std
import matplotlib.pyplot as plt
import os
from tqdm import tqdm, trange
import pandas as pd
from scipy import signal
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
import sys
project_path = "/home/pierre/research/tuthill/layered-walking"
sys.path.append(project_path)
from tools.angle_functions import anglesTG as angle_names_1leg
from tools.angle_functions import legs
from tools.angle_functions import make_fly_video, angles_to_pose_names
from tools.trajgen_tools import WalkingData
from tools.dist_tools import DistType
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

plt.style.use('default')
plt.rcParams['figure.figsize'] = (7.5, 2)
#+END_SRC


#+RESULTS:

#+BEGIN_SRC jupyter-python
xvals = np.linspace(-np.pi, np.pi)
def get_phase(ang):
    m = np.median(ang, axis=0)
    s = np.std(ang, axis=0)
    s[s == 0] = 1
    dm = (ang - m) / s
    phase = np.arctan2(-dm[:,1], dm[:,0])
    return phase

def phase_align_poly(ang, extra=None, order=5):
    topredict = ang
    if extra is not None:
        topredict = np.hstack([ang, extra])
    means = np.full((len(xvals), topredict.shape[1]), np.nan)
    stds = np.full((len(xvals), topredict.shape[1]), np.nan)
    if len(ang) < 50: # not enough data
        return means, stds
    phase = get_phase(ang)
    # pcs = np.vstack([np.cos(phase), np.sin(phase)]).T
    b = np.vstack([np.cos(i * phase + j) for i in range(order) for j in [0, np.pi/2]]).T
    xcs = np.vstack([np.cos(i * xvals + j) for i in range(order) for j in [0, np.pi/2]]).T
    for i in range(topredict.shape[1]):
        cc = np.isfinite(topredict[:,i])
        model = sm.OLS(topredict[cc,i], b[cc]).fit()
        means[:,i] = model.predict(xcs)
        s, upper,lower = wls_prediction_std(model, xcs)
        stds[:,i] = s
    return means, stds

#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
# list(d.keys())
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
fname = os.path.join(project_path, 'output', 'dist_stats_v13.npz')
d = np.load(fname, allow_pickle=True)

conditions = d['conditions'][()]
angles = d['angleTG']
derivs = d['drvTG']
poses = d['pose_3d']
accels = signal.savgol_filter(derivs, 5, 2, deriv=1, axis=3)


speeds = np.array([x['context'] for x in conditions])
dist_types = np.array([x['dist'].value for x in conditions])

#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
dist_types
#+END_SRC

#+RESULTS:
: array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1,
:        1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2,
:        2])


#+BEGIN_SRC jupyter-python
perturb_ranges = {
    'before': (0, 200),
    'during': (200, 400),
    'after': (400, 600)
}
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
conditions[:10]
#+END_SRC

#+RESULTS:
#+begin_example
array([{'context': [8, 0, 0], 'offset': 0, 'dist': <DistType.ZERO: 0>},
       {'context': [8, 0, 0], 'offset': 1, 'dist': <DistType.ZERO: 0>},
       {'context': [8, 0, 0], 'offset': 2, 'dist': <DistType.ZERO: 0>},
       {'context': [8, 0, 0], 'offset': 3, 'dist': <DistType.ZERO: 0>},
       {'context': [8, 0, 0], 'offset': 4, 'dist': <DistType.ZERO: 0>},
       {'context': [8, 0, 0], 'offset': 0, 'dist': <DistType.SLIPPERY_SURFACE: 1>},
       {'context': [8, 0, 0], 'offset': 1, 'dist': <DistType.SLIPPERY_SURFACE: 1>},
       {'context': [8, 0, 0], 'offset': 2, 'dist': <DistType.SLIPPERY_SURFACE: 1>},
       {'context': [8, 0, 0], 'offset': 3, 'dist': <DistType.SLIPPERY_SURFACE: 1>},
       {'context': [8, 0, 0], 'offset': 4, 'dist': <DistType.SLIPPERY_SURFACE: 1>}],
      dtype=object)
#+end_example


#+BEGIN_SRC jupyter-python
fname = '/home/pierre/data/tuthill/models/models_sls/walk_sls_legs_13.pickle'
wd = WalkingData(fname)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
wd.bout_context
#+END_SRC

#+RESULTS:
: array([[ 9.968394 , -0.2343701,  2.8402553],
:        [ 5.0455656,  8.416804 , -0.6643358],
:        [ 8.86242  ,  8.355217 , -1.4570035],
:        ...,
:        [ 9.824624 ,  3.8363965,  2.475409 ],
:        [13.015    , -0.6182214,  1.8810371],
:        [ 6.7187276, -3.0979152,  2.84063  ]], dtype=float32)

#+BEGIN_SRC jupyter-python
fancy_angle_names = {
    'C_flex': 'femur-tibia\nflexion',
    'A_rot': 'coxa\nrotation',
    'A_abduct': 'body-coxa\nflexion',
    'B_flex': 'coxa-femur\nflexion',
    'B_rot': 'femur\nrotation'
}
#+END_SRC

#+RESULTS:


* Example time series

For the figure part A, we'd like to have multiple example angles. Perhaps R1 femur-tibia flexion would be good to show, but also L2 femur rotation?
I'd like to have multiple traces for each angle, perhaps we could show with forward, rotation, and sideslip?

In this code, we could also make a supplementary figure with a more complete set of angles.

** Simulated plots

#+BEGIN_SRC jupyter-python
plot_speeds = [[8, 0, 0], [12, 0, 0], [16, 0, 0]]
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
angname = 'C_flex'
leg = 'R1'
ix_ang = angle_names_1leg.index(angname)
ix_leg = legs.index(leg)

plt.figure(figsize=(5.5, 2))
for i in range(len(plot_speeds)):
    plt.subplot(3, 1, i+1)
    ixs = np.where(np.all(speeds == plot_speeds[i], axis=1)
                   & (dist_types == DistType.SLIPPERY_SURFACE.value))[0]
    ix_bout = ixs[2]
    ang = angles[ix_bout, ix_leg, ix_ang, :]
    t = np.arange(len(ang))/300.0
    plt.plot(t, ang)
    plt.axvline(t[200], color='gray', linestyle='dotted')
    plt.axvline(t[400], color='gray', linestyle='dotted')
    plt.ylim(30, 160)
    plt.yticks([60, 120])
    if i != 2:
        plt.xticks(ticks=[])

sns.despine(bottom=True)
plt.ylabel("Angle (deg)")
plt.xlabel("Time (s)")

plt.savefig('plots/fig3A_trace_slippery_{}{}.pdf'.format(leg, angname), bbox_inches = "tight")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/1edd5bd8863a2ad0cd011dbadaced626c4fe5480.png]]


#+BEGIN_SRC jupyter-python
angname = 'C_flex'
leg = 'R1'
ix_ang = angle_names_1leg.index(angname)
ix_leg = legs.index(leg)

plt.figure(figsize=(5.5, 2))
for i in range(len(plot_speeds)):
    plt.subplot(3, 1, i+1)
    ixs = np.where(np.all(speeds == plot_speeds[i], axis=1)
                   & (dist_types == DistType.UNEVEN_SURFACE.value))[0]
    ix_bout = ixs[2]
    ang = angles[ix_bout, ix_leg, ix_ang, :]
    t = np.arange(len(ang))/300.0
    plt.plot(t, ang)
    plt.axvline(t[200], color='gray', linestyle='dotted')
    plt.axvline(t[400], color='gray', linestyle='dotted')
    plt.ylim(30, 160)
    plt.yticks([60, 120])
    if i != 2:
        plt.xticks(ticks=[])

sns.despine(bottom=True)
plt.ylabel("Angle (deg)")
plt.xlabel("Time (s)")

plt.savefig('plots/fig3A_trace_uneven_{}{}.pdf'.format(leg, angname), bbox_inches = "tight")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/1db64b0e044cccce4448cee4d8d91c00cbed10df.png]]

#+BEGIN_SRC jupyter-python
angname = 'B_rot'
leg = 'L2'
ix_ang = angle_names_1leg.index(angname)
ix_leg = legs.index(leg)

plt.figure(figsize=(5.5, 2))
for i in range(len(plot_speeds)):
    plt.subplot(3, 1, i+1)
    ixs = np.where(np.all(speeds == plot_speeds[i], axis=1)
                   & (dist_types == DistType.UNEVEN_SURFACE.value))[0]
    ix_bout = ixs[2]
    ang = angles[ix_bout, ix_leg, ix_ang, :]
    t = np.arange(len(ang))/300.0
    plt.plot(t, ang)
    plt.axvline(t[200], color='gray', linestyle='dotted')
    plt.axvline(t[400], color='gray', linestyle='dotted')
    plt.ylim(100, 200)
    plt.yticks([120, 180])
    if i != 2:
        plt.xticks(ticks=[])

sns.despine(bottom=True)
plt.ylabel("Angle (deg)")
plt.xlabel("Time (s)")

plt.savefig('plots/fig3A_trace_uneven_{}{}.pdf'.format(leg, angname), bbox_inches = "tight")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/addc6c05757b834f2aab4219c0b04181540af1c5.png]]

#+BEGIN_SRC jupyter-python
angname = 'B_rot'
leg = 'L2'
ix_ang = angle_names_1leg.index(angname)
ix_leg = legs.index(leg)

plt.figure(figsize=(5.5, 2))
for i in range(len(plot_speeds)):
    plt.subplot(3, 1, i+1)
    ixs = np.where(np.all(speeds == plot_speeds[i], axis=1)
                   & (dist_types == DistType.SLIPPERY_SURFACE.value))[0]
    ix_bout = ixs[2]
    ang = angles[ix_bout, ix_leg, ix_ang, :]
    t = np.arange(len(ang))/300.0
    plt.plot(t, ang)
    plt.axvline(t[200], color='gray', linestyle='dotted')
    plt.axvline(t[400], color='gray', linestyle='dotted')
    plt.ylim(100, 200)
    plt.yticks([120, 180])
    if i != 2:
        plt.xticks(ticks=[])

sns.despine(bottom=True)
plt.ylabel("Angle (deg)")
plt.xlabel("Time (s)")

plt.savefig('plots/fig3A_trace_slippery_{}{}.pdf'.format(leg, angname), bbox_inches = "tight")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/0c1de2bdd9594ea024d43033400193d30c08d1d8.png]]


* Phase plots

#+RESULTS:


Load the simulated data
#+BEGIN_SRC jupyter-python
ds = []
for i in trange(len(speeds), ncols=70):
    for ix_leg, leg in enumerate(legs):
        for ix_ang, angname in enumerate(angle_names_1leg):
            forward, rot, side = speeds[i]
            xf = np.vstack([angles[i, ix_leg, ix_ang, :],
                           derivs[i, ix_leg, ix_ang, :]]).T
            extraf = accels[i, ix_leg, ix_ang, :, None]
            for k, r in perturb_ranges.items():
                x = xf[r[0]:r[1]]
                c = np.all(np.isfinite(x), axis=1)
                x = x[c]
                extra = extraf[r[0]:r[1]][c]
                means, stds = phase_align_poly(
                    x, extra=extra)
                d = pd.DataFrame(np.hstack([xvals[:,None],means]),
                                 columns=['phase', 'angle', 'deriv', 'accel'])
                d['speed_forward'] = forward
                d['speed_rotation'] = rot
                d['speed_side'] = side
                d['angle_name'] = angname
                d['leg'] = leg
                d['type'] = 'simulated'
                d['dist_type'] = dist_types[i]
                d['dist_time'] = k
                ds.append(d)
fullangf = pd.concat(ds).reset_index(drop=True)
#+END_SRC

#+RESULTS:
: 100%|█████████████████████████████████| 45/45 [00:18<00:00,  2.45it/s]



#+BEGIN_SRC jupyter-python
fullangf['deriv_units'] = fullangf['deriv'] * 300.0
fullangf['accel_units'] = fullangf['accel'] * 300.0 * 300.0
#+END_SRC

#+RESULTS:




#+BEGIN_SRC jupyter-python
leg = 'R1'
angname = 'C_flex'

dd = fullangf
c = (dd['speed_side'].abs() <= 3) & (dd['speed_rotation'].abs() <= 3) \
    & (dd['speed_forward'] > 1) \
    & (dd['angle_name'] == angname) & (dd['leg'] == leg) & \
    (dd['dist_type'] == DistType.SLIPPERY_SURFACE.value)
g = sns.relplot(data=dd[c], x="phase", y="angle", hue="dist_time",
                estimator=np.mean, err_style='band', ci=95,
                col="speed_forward", row="dist_time",
                kind="line", height=1.3, aspect=1.1,
                palette=sns.color_palette("rocket_r", 3))
g.set(ylabel="Angle (deg)")
g.set_titles("{col_name} mm/s")
plt.savefig("plots/fig3B_phaseangle_slippery_{}{}.pdf".format(leg, angname),
            bbox_inches="tight")

dd = fullangf
c = (dd['speed_side'].abs() <= 3) & (dd['speed_rotation'].abs() <= 3) \
    & (dd['speed_forward'] > 1) \
    & (dd['angle_name'] == angname) & (dd['leg'] == leg) & \
    (dd['dist_type'] == DistType.UNEVEN_SURFACE.value)
g = sns.relplot(data=dd[c], x="phase", y="angle", hue="dist_time",
                estimator=np.mean, err_style='band', ci=95,
                col="speed_forward", row="dist_time",
                kind="line", height=1.3, aspect=1.1,
                palette=sns.color_palette("rocket_r", 3))
g.set(ylabel="Angle (deg)")
g.set_titles("{col_name} mm/s")
plt.savefig("plots/fig3B_phaseangle_uneven_{}{}.pdf".format(leg, angname),
            bbox_inches="tight")

#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/e24f4fb6efe5efcd1fb4f1316fdc0c54787def2a.png]]
[[file:./.ob-jupyter/d50794734d682597b0e00eef4e4b28d624a5f468.png]]
:END:

#+BEGIN_SRC jupyter-python
leg = 'L2'
angname = 'B_rot'

dd = fullangf
c = (dd['speed_side'].abs() <= 3) & (dd['speed_rotation'].abs() <= 3) \
    & (dd['speed_forward'] > 1) \
    & (dd['angle_name'] == angname) & (dd['leg'] == leg) & \
    (dd['dist_type'] == DistType.SLIPPERY_SURFACE.value)
g = sns.relplot(data=dd[c], x="phase", y="angle", hue="dist_time",
                estimator=np.mean, err_style='band', ci=95,
                col="speed_forward", row="dist_time",
                kind="line", height=1.3, aspect=1.1,
                palette=sns.color_palette("rocket_r", 3))
g.set(ylabel="Angle (deg)")
g.set_titles("{col_name} mm/s")
plt.savefig("plots/fig3B_phaseangle_slippery_{}{}.pdf".format(leg, angname),
            bbox_inches="tight")

dd = fullangf
c = (dd['speed_side'].abs() <= 3) & (dd['speed_rotation'].abs() <= 3) \
    & (dd['speed_forward'] > 1) \
    & (dd['angle_name'] == angname) & (dd['leg'] == leg) & \
    (dd['dist_type'] == DistType.UNEVEN_SURFACE.value)
g = sns.relplot(data=dd[c], x="phase", y="angle", hue="dist_time",
                estimator=np.mean, err_style='band', ci=95,
                col="speed_forward", row="dist_time",
                kind="line", height=1.3, aspect=1.1,
                palette=sns.color_palette("rocket_r", 3))
g.set(ylabel="Angle (deg)")
g.set_titles("{col_name} mm/s")
plt.savefig("plots/fig3B_phaseangle_uneven_{}{}.pdf".format(leg, angname),
            bbox_inches="tight")

#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/d7b78cc1b991b67c129510b60dc1397a8addc340.png]]
[[file:./.ob-jupyter/08e775f946683895db0a7b9a32c3b4f67dc3bd29.png]]
:END:


* Phase coupling within a leg - phase version
#+BEGIN_SRC jupyter-python
ds = []
for i in trange(len(speeds), ncols=70):
    forward, rot, side = speeds[i]
    for k, r in perturb_ranges.items():
        d = pd.DataFrame()
        for ix_leg, leg in enumerate(legs):
            for ix_ang, angname in enumerate(angle_names_1leg):
                xf = np.vstack([angles[i, ix_leg, ix_ang, :],
                                derivs[i, ix_leg, ix_ang, :]]).T
                x = xf[r[0]:r[1]]
                phase = get_phase(x)
                key = leg + angname
                d[key] = phase
        d['speed_forward'] = forward
        d['speed_rotation'] = rot
        d['speed_side'] = side
        d['type'] = 'simulated'
        d['dist_time'] = k
        d['dist_type'] = dist_types[i]
        ds.append(d)
phases_byleg_sim = pd.concat(ds).reset_index(drop=True)
#+END_SRC

#+RESULTS:
: 100%|█████████████████████████████████| 45/45 [00:01<00:00, 37.07it/s]


#+BEGIN_SRC jupyter-python
phases_byleg = phases_byleg_sim
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
d = phases_byleg
fig, subplots = plt.subplots(6, 5, figsize=(9, 1.5*6))
for ix_leg, leg in enumerate(legs):
    if leg in ['L2', 'R2']:
        refname = 'B_rot'
    else:
        refname = 'C_flex'
    for ix_ang, angname in enumerate(sorted(angle_names_1leg)):
        ax = subplots[ix_leg][ix_ang]
        if angname == refname:
            if ix_leg == 0:
                ax.set_title(fancy_angle_names[angname])
            ax.set_axis_off()
            continue
        d = phases_byleg[phases_byleg['dist_type'] == 2]
        value = np.mod(d[leg + angname] - d[leg + refname] + np.pi, 2*np.pi)-np.pi
        g = sns.kdeplot(value, cut=0, shade=True, ax=ax, hue=d['dist_time'],
                        palette=sns.color_palette("tab10", 3))
        ax.set_ylim(0, 0.6)
        g.legend_ = None
        if ix_leg == 0:
            ax.set_title(fancy_angle_names[angname])
        if ix_ang == 0:
            ax.set_ylabel(leg + "\nPDF")
        else:
            ax.set_yticklabels([])
            ax.set_ylabel("")
        if ix_leg != 5:
            ax.set_xticklabels([])

plt.savefig("plots/fig3D_phases_withinleg.pdf", bbox_inches = "tight")
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/1c1fc5809df75b856277ccb4c1fb3f8fda58004b.png]]
[[file:./.ob-jupyter/4ce4b23c40d63f56a7cfbb21057d73dbe314c7c7.png]]
:END:


* Phase coupling across legs

How to demonstrate the phase coupling across the legs?
I guess we extract the phase from each leg, and compute the difference mod 2 pi?

#+BEGIN_SRC jupyter-python
ds = []
for i in trange(len(speeds), ncols=70):
    for k, r in perturb_ranges.items():
        d = pd.DataFrame()
        forward, rot, side = speeds[i]
        for ix_leg, leg in enumerate(legs):
            if leg in ['L2', 'R2']:
                phaseang = 'B_rot'
            else:
                phaseang = 'C_flex'
            ix_ang_phase = angle_names_1leg.index(phaseang)
            xf = np.vstack([angles[i, ix_leg, ix_ang_phase, :],
                           derivs[i, ix_leg, ix_ang_phase, :]]).T
            x = xf[r[0]:r[1]]
            phase = get_phase(x)
            d['phase_' + leg] = phase
        d['speed_forward'] = forward
        d['speed_rotation'] = rot
        d['speed_side'] = side
        d['type'] = 'simulated'
        d['dist_type'] = dist_types[i]
        d['dist_time'] = k
        ds.append(d)
phased_sim = pd.concat(ds).reset_index(drop=True)
#+END_SRC

#+RESULTS:
: 100%|████████████████████████████████| 45/45 [00:00<00:00, 113.25it/s]


#+BEGIN_SRC jupyter-python
phased = phased_sim

# Add pi to correct for offset due to the way we compute the phase
phased['phase_L1'] += np.pi
phased['phase_R1'] += np.pi
phased['phase_R2'] += np.pi
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
fig, subplots = plt.subplots(6, 6, figsize=(8, 8))
for i, leg_i in enumerate(legs):
    for j, leg_j in enumerate(legs):
        if i == j:
            ax = subplots[i][j]
            ax.text(0.4, 0.4, leg_i, fontsize="xx-large")
            ax.set_axis_off()
            continue
        ax = subplots[i][j]
        d = phased[phased['dist_type'] == 1]
        value = np.array(np.mod(d['phase_'+leg_i] - d['phase_'+leg_j], 2*np.pi))
        g = sns.kdeplot(value, cut=0, bw_method=0.1, shade=True, ax=ax,
                        hue=d['dist_time'],
                        palette=sns.color_palette("rocket_r", 3))
        g.legend_ = None
        ax.set_xlim(0, 2*np.pi)
        ax.set_ylim(0, 0.6)
        ax.set_ylabel("")
        ax.set_xticks([np.pi])
        ax.set_yticks([0.3])
        if i != 5:
            ax.set_xticklabels([])
        if j != 0:
            ax.set_yticklabels([])

fig.savefig('plots/fig3D_phases_legs.pdf', bbox_inches = "tight")
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/e394f0bad1e0bcb13e56f455eae4615eb8ebb484.png]]
:END:


* Step frequency

Here, I think it would be interesting to show the step frequency of the model and the simulation at different speeds.


#+BEGIN_SRC jupyter-python
ds = []
for i in range(len(speeds)):
    forward, rot, side = speeds[i]
    leg = 'L1'
    phaseang = 'C_flex'
    ix_leg = legs.index(leg)
    ix_ang_phase = angle_names_1leg.index(phaseang)
    ang = angles[i, ix_leg, ix_ang_phase, :]
    for k, r in perturb_ranges.items():
        ang_sub = ang[r[0]:r[1]]
        peaks, _ = signal.find_peaks(-ang_sub, distance=18, height=-80)
        if len(peaks) < 2: continue
        freq = np.mean(300.0 / np.diff(peaks))
        row = {
            'step_freq': freq,
            'speed_forward': forward,
            'speed_rotation': rot,
            'speed_side': side,
            'type': 'simulated',
            'dist_time': k,
            'dist_type': dist_types[i]
        }
        ds.append(row)
steps_sim = pd.DataFrame.from_records(ds)
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
steps_df = steps_sim
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
dd = steps_df

c = (dd['speed_side'].abs() <= 2) & (dd['speed_rotation'].abs() <= 2) \
    & (dd['speed_forward'] > 1) & (dd['dist_type'] == DistType.UNEVEN_SURFACE.value)
plt.figure(figsize=(6, 4))
g = sns.pointplot(x='speed_forward', y='step_freq', data=dd[c], hue='dist_time',
                  palette=sns.color_palette('rocket_r', 3))
g.legend_ = None
sns.despine()
plt.xlabel("Forward speed (mm/s)")
plt.ylabel("Step frequency (steps/s)")
plt.savefig("plots/fig3_stepfreq_uneven.pdf", bbox_inches="tight")

c = (dd['speed_side'].abs() <= 2) & (dd['speed_rotation'].abs() <= 2) \
    & (dd['speed_forward'] > 1) & (dd['dist_type'] == DistType.SLIPPERY_SURFACE.value)
plt.figure(figsize=(6, 4))
g = sns.pointplot(x='speed_forward', y='step_freq', data=dd[c], hue='dist_time',
                  palette=sns.color_palette('rocket_r', 3))
g.legend_ = None
sns.despine()
plt.xlabel("Forward speed (mm/s)")
plt.ylabel("Step frequency (steps/s)")
plt.savefig("plots/fig3_stepfreq_slippery.pdf", bbox_inches="tight")
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/bf5413220a00d12a1fc93f5ea8e07e1c617c4fe1.png]]
[[file:./.ob-jupyter/66b3ea3340d6f10ac38b33b1f624259f89ea8c2b.png]]
:END:
