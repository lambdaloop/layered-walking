#+TITLE: Phase Plots

* Goal

The goal for this notebook is to plot phase-angle plots

* Setup

#+BEGIN_SRC jupyter-python
import numpy as np
import statsmodels.api as sm
from statsmodels.sandbox.regression.predstd import wls_prediction_std
import matplotlib.pyplot as plt
import os
from tqdm import tqdm, trange
import pandas as pd
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
import sys
project_path = "/home/pierre/research/tuthill/layered-walking"
sys.path.append(project_path)
from tools.angle_functions import anglesTG as angle_names_1leg
from tools.angle_functions import legs
from tools.angle_functions import make_fly_video, angles_to_pose_names
from tools.trajgen_tools import WalkingData
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

plt.style.use('default')
plt.rcParams['figure.figsize'] = (7.5, 2)
#+END_SRC


#+RESULTS:

#+BEGIN_SRC jupyter-python
xvals = np.linspace(-np.pi, np.pi)
def get_phase(ang):
    m = np.median(ang, axis=0)
    s = np.std(ang, axis=0)
    s[s == 0] = 1
    dm = (ang - m) / s
    phase = np.arctan2(-dm[:,1], dm[:,0])
    return phase

def phase_align_poly(ang, extra=None, order=5):
    topredict = ang
    if extra is not None:
        topredict = np.hstack([ang, extra])
    means = np.full((len(xvals), topredict.shape[1]), np.nan)
    stds = np.full((len(xvals), topredict.shape[1]), np.nan)
    if len(ang) < 50: # not enough data
        return means, stds
    phase = get_phase(ang)
    # pcs = np.vstack([np.cos(phase), np.sin(phase)]).T
    b = np.vstack([np.cos(i * phase + j) for i in range(order) for j in [0, np.pi/2]]).T
    xcs = np.vstack([np.cos(i * xvals + j) for i in range(order) for j in [0, np.pi/2]]).T
    for i in range(topredict.shape[1]):
        cc = np.isfinite(topredict[:,i])
        model = sm.OLS(topredict[cc,i], b[cc]).fit()
        means[:,i] = model.predict(xcs)
        s, upper,lower = wls_prediction_std(model, xcs)
        stds[:,i] = s
    return means, stds

#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
# list(d.keys())
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
fname = os.path.join(project_path, 'output', 'control_stats_v13.npz')
d = np.load(fname, allow_pickle=True)

conditions = d['conditions'][()]
angles = d['angleTG']
derivs = d['drvTG']
poses = d['pose_3d']

speeds = np.array([x['context'] for x in conditions])

#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
poses.shape
#+END_SRC

#+RESULTS:
| 500 | 600 | 6 | 5 | 3 |


#+BEGIN_SRC jupyter-python
fname = '/home/pierre/data/tuthill/models/models_sls/walk_sls_legs_13.pickle'
wd = WalkingData(fname)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
wd.bout_context
#+END_SRC

#+RESULTS:
: array([[ 9.968394 , -0.2343701,  2.8402553],
:        [ 5.0455656,  8.416804 , -0.6643358],
:        [ 8.86242  ,  8.355217 , -1.4570035],
:        ...,
:        [ 9.824624 ,  3.8363965,  2.475409 ],
:        [13.015    , -0.6182214,  1.8810371],
:        [ 6.7187276, -3.0979152,  2.84063  ]], dtype=float32)

* Example time series
#+BEGIN_SRC jupyter-python
angle_names_1leg
#+END_SRC

#+RESULTS:
| C_flex | A_rot | A_abduct | B_flex | B_rot |


#+BEGIN_SRC jupyter-python

#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
angname = 'C_flex'
leg = 'L1'
speed = [8, 0, 0]

ix_ang = angle_names_1leg.index(angname)
ix_leg = legs.index(leg)
ixs_speed = np.where(np.all(speeds == speed, axis=1))[0]
ix_speed = ixs_speed[1]

ang = angles[ix_speed, ix_leg, ix_ang]

plt.plot(ang[:600], label='simulated')

ww = wd.get_bout(speed, offset=3)
list(ww.keys())

ang = ww['angles'][leg][:, ix_ang]
plt.plot(ang, label='real')

plt.legend()
plt.ylabel("Angle (deg)")
plt.xlabel("Frames (300Hz)")
#+END_SRC

#+RESULTS:
:RESULTS:
: Text(0.5, 0, 'Frames (300Hz)')
[[file:./.ob-jupyter/6ac7bbe0ce6f54b2f64f0d219e9b3e0d7a743043.png]]
:END:

#+BEGIN_SRC jupyter-python
make_fly_video(poses[ix_speed, :600], 'vids/simulated_{}mms.mp4'.format(speed[0]))

ww = wd.get_bout(speed)
angs = np.hstack([ww['angles'][leg] for leg in legs])
angle_names_full = [(leg + ang) for leg in legs for ang in angle_names_1leg]
p3d = angles_to_pose_names(angs, angle_names_full)
make_fly_video(p3d, 'vids/real_{}mms.mp4'.format(speed[0]))
#+END_SRC

#+RESULTS:
:RESULTS:
: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 600/600 [00:12<00:00, 46.67it/s]
: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 600/600 [00:13<00:00, 45.60it/s]
[[file:./.ob-jupyter/61715a6543306dda5120327d6b10eee210e81a2a.png]]
[[file:./.ob-jupyter/aa6d4350bac99303124ef85c49e7b200c3138ce1.png]]
:END:

#+BEGIN_SRC jupyter-python
pose_3d = poses[ix_speed, :600]
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
import skvideo
outname = 'vids/test.mp4'
writer = skvideo.io.FFmpegWriter(outname, inputdict={
    '-framerate': str(30.0),
}, outputdict={
    '-vcodec': 'h264',
    '-pix_fmt': 'yuv420p', # to support more players
    '-vf': 'pad=ceil(iw/2)*2:ceil(ih/2)*2' # to handle width/height not divisible by 2
})
cmap = plt.get_cmap('tab10')
fig = plt.figure(figsize=(4, 4), dpi=200)
ax = fig.add_subplot(1, 1, 1, projection='3d')

colors = ['#1E88E5', '#D81B60']

for i in trange(pose_3d.shape[0]):
# for i in range(5):
    ax.cla()
    X_p = pose_3d[i]
    for il, xyz in enumerate(X_p):
        ax.plot(xyz[:, 0], xyz[:, 1], xyz[:, 2],
                marker='o', markersize=5, linewidth=1.7,
                # color=cmap((il * 2) % 6 + (il // 3))
                color=colors[il % 2])
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    ax.set_zlim(-1, 1)
    ax.set_axis_off()
    plt.draw()
    img = np.array(fig.canvas.renderer._renderer).copy()
    writer.writeFrame(img)
writer.close()

#+END_SRC


#+RESULTS:
:RESULTS:
: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 600/600 [00:12<00:00, 48.05it/s]
[[file:./.ob-jupyter/9dc825cd54345d4b56988bc6e7fc373f0b75dbcc.png]]
:END:
#+RESULTS:



#+BEGIN_SRC jupyter-python

#+END_SRC

#+RESULTS:



#+BEGIN_SRC jupyter-python
plt.figure(1)
plt.clf()
# plt.plot(angles[210, 0, 0, 500:], derivs[210, 0, 0, 500:])
plt.plot(angles[300, 0, 0])
plt.draw()
plt.show(block=False)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: IndexError                                Traceback (most recent call last)
: Input In [100], in <cell line: 4>()
:       2 plt.clf()
:       3 # plt.plot(angles[210, 0, 0, 500:], derivs[210, 0, 0, 500:])
: ----> 4 plt.plot(angles[300, 0, 0])
:       5 plt.draw()
:       6 plt.show(block=False)
:
: IndexError: index 300 is out of bounds for axis 0 with size 200
: <Figure size 750x200 with 0 Axes>
:END:


So there's 3 speeds. It seems hard to plot the full grid.
Perhaps we can do
- phase/angle graph with forward speed varying
- phase/angle graph with rotation speed varying
- phase/angle graph with sideslip speed varying

Yeah that's the best, any grid would just be confusing to look at.
#+BEGIN_SRC jupyter-python
x = np.vstack([angles[210, 0, 0, 500:],
               derivs[210, 0, 0, 500:]]).T
means, stds = phase_align_poly(x)

plt.plot(xvals, means[:, 0])
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: IndexError                                Traceback (most recent call last)
: Input In [101], in <cell line: 1>()
: ----> 1 x = np.vstack([angles[210, 0, 0, 500:],
:       2                derivs[210, 0, 0, 500:]]).T
:       3 means, stds = phase_align_poly(x)
:       5 plt.plot(xvals, means[:, 0])
:
: IndexError: index 210 is out of bounds for axis 0 with size 200
:END:

* Just L1C_flex
#+BEGIN_SRC jupyter-python
angles.shape
legs
#+END_SRC

#+RESULTS:
| L1 | L2 | L3 | R1 | R2 | R3 |


#+BEGIN_SRC jupyter-python
ds = []
for i in range(len(speeds)):
    forward, rot, side = speeds[i]
    x = np.vstack([angles[i, 3, 0, :],
                   derivs[i, 3, 0, :]]).T
    means, stds = phase_align_poly(x)
    d = pd.DataFrame(np.hstack([xvals[:,None],means]),
                     columns=['phase', 'angle', 'deriv'])
    d['speed_forward'] = forward
    d['speed_rotation'] = rot
    d['speed_side'] = side
    ds.append(d)
angf = pd.concat(ds).reset_index(drop=True)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
c = (angf['speed_side'] == 0) & (angf['speed_rotation'] == 0)
sns.lineplot(data=angf.loc[c], x="phase", y="angle", hue="speed_forward",
             estimator=np.nanmean, hue_norm=(0, 20),
             err_style="bars", ci=68)
#+END_SRC

#+RESULTS:
:RESULTS:
: <AxesSubplot:xlabel='phase', ylabel='angle'>
[[file:./.ob-jupyter/4563a70727ff36c0c04bc1ea0b336293f0eabbd4.png]]
:END:

#+BEGIN_SRC jupyter-python
c = (angf['speed_side'] == 0) & (angf['speed_forward'] == 12)
sns.lineplot(data=angf.loc[c], x="phase", y="angle", hue="speed_rotation", estimator=np.mean, palette="twilight", hue_norm=(-10, 10),
             err_style="bars", ci=68)
#+END_SRC

#+RESULTS:
:RESULTS:
: <AxesSubplot:xlabel='phase', ylabel='angle'>
[[file:./.ob-jupyter/7e5db9fcd7cba517ac3db979580ef32047359f62.png]]
:END:


#+BEGIN_SRC jupyter-python
c = (angf['speed_rotation'] == 0) & (angf['speed_forward'] == 12)
sns.lineplot(data=angf.loc[c], x="phase", y="angle", hue="speed_side", estimator=np.mean, palette="twilight", hue_norm=(-6, 6),
             err_style="bars", ci=68)
#+END_SRC

#+RESULTS:
:RESULTS:
: <AxesSubplot:xlabel='phase', ylabel='angle'>
[[file:./.ob-jupyter/4c4af2621053300b80e20ff08907f2d4e8b18d17.png]]
:END:

*


* All angles
#+BEGIN_SRC jupyter-python
ds = []
for i in trange(len(speeds), ncols=70):
    for ix_leg, leg in enumerate(legs):
        for ix_ang, angname in enumerate(angle_names_1leg):
            forward, rot, side = speeds[i]
            x = np.vstack([angles[i, ix_leg, ix_ang, :],
                           derivs[i, ix_leg, ix_ang, :]]).T
            c = np.all(np.isfinite(x), axis=1)
            x = x[c]
            means, stds = phase_align_poly(x)
            d = pd.DataFrame(np.hstack([xvals[:,None],means]),
                             columns=['phase', 'angle', 'deriv'])
            d['speed_forward'] = forward
            d['speed_rotation'] = rot
            d['speed_side'] = side
            d['angle_name'] = angname
            d['leg'] = leg
            d['type'] = 'simulated'
            ds.append(d)
allangf = pd.concat(ds).reset_index(drop=True)
#+END_SRC

#+RESULTS:
: 100%|███████████████████████████████| 500/500 [00:48<00:00, 10.38it/s]

#+BEGIN_SRC jupyter-python
dd = allangf
c = (dd['speed_side'] == 0) & (dd['speed_rotation'] == 0) & (dd['angle_name'] == 'C_flex')
g = sns.relplot(data=dd[c], x="phase", y="angle", hue="speed_forward",
                estimator=np.mean, hue_norm=(0, 20), err_style="bars", ci=68,
                col="leg", kind="line", height=3, aspect=0.8)
g.set(ylim=(30, 130))
#+END_SRC

#+RESULTS:
:RESULTS:
: <seaborn.axisgrid.FacetGrid at 0x7f97427751f0>
[[file:./.ob-jupyter/346db3dc3a3eb58d5bd434e805dd01e6837d7bd2.png]]
:END:

#+BEGIN_SRC jupyter-python
c = (allangf['speed_side'] == 0) & (allangf['speed_forward'] == 12) & (dd['angle_name'] == 'C_flex')
sns.relplot(data=allangf.loc[c], x="phase", y="angle", hue="speed_rotation",
             estimator=np.mean, palette="twilight", hue_norm=(-10, 10),
             err_style="bars", ci=68,
             row="angle_name", col="leg", kind="line", height=2)
#+END_SRC

#+RESULTS:
:RESULTS:
: <seaborn.axisgrid.FacetGrid at 0x7f97911a8cd0>
[[file:./.ob-jupyter/23bb2a6a967314d5c4fc7ffa1e27ea3d4ad89b6b.png]]
:END:

#+BEGIN_SRC jupyter-python
c = (allangf['speed_rotation'] == 0) & (allangf['speed_forward'] == 12) & (dd['angle_name'] == 'C_flex')
sns.relplot(data=allangf.loc[c], x="phase", y="angle", hue="speed_side",
             estimator=np.mean, palette="twilight", hue_norm=(-6, 6),
             err_style="bars", ci=68,
             row="angle_name", col="leg", kind="line", height=2)
#+END_SRC

#+RESULTS:
:
: KeyboardInterrupt
:
: Error in callback <function flush_figures at 0x7f97963f98b0> (for post_execute):
:
: KeyboardInterrupt
:


* Real data

#+BEGIN_SRC jupyter-python
ds = []
bnums = wd._get_minlen_bnums(400)
for i in trange(len(bnums), ncols=70):
    bnum = bnums[i]
    ww = wd.get_bnum(bnum)
    mean_speed = np.mean(ww['contexts'], axis=0)
    forward, rot, side = mean_speed
    for ix_leg, leg in enumerate(legs):
        for ix_ang, angname in enumerate(angle_names_1leg):
            angs = ww['angles'][leg][:, ix_ang]
            drvs = ww['derivatives'][leg][:, ix_ang]
            x = np.vstack([angs, drvs]).T
            c = np.all(np.isfinite(x), axis=1)
            x = x[c]
            means, stds = phase_align_poly(x)
            d = pd.DataFrame(np.hstack([xvals[:,None],means]),
                             columns=['phase', 'angle', 'deriv'])
            d['speed_forward_raw'] = forward
            d['speed_rotation_raw'] = rot
            d['speed_side_raw'] = side
            d['angle_name'] = angname
            d['leg'] = leg
            d['bnum'] = bnum
            d['type'] = 'real'
            ds.append(d)
realangf = pd.concat(ds).reset_index(drop=True)
#+END_SRC

#+RESULTS:
: 100%|███████████████████████████████| 171/171 [00:17<00:00,  9.86it/s]


#+BEGIN_SRC jupyter-python
realangf['speed_forward'] = ((realangf['speed_forward_raw'] + 2) // 4) * 4
realangf['speed_rotation'] = ((realangf['speed_rotation_raw'] + 2) // 4) * 4
realangf['speed_side'] = ((realangf['speed_side_raw'] + 1) // 2) * 2
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python

#+END_SRC


#+BEGIN_SRC jupyter-python
dd = realangf
c = (dd['speed_side'].abs() <= 2) & (dd['speed_rotation'].abs() <= 2) & (dd['angle_name'] == 'B_flex') \
    & (dd['speed_forward'] > 1)
g = sns.relplot(data=dd[c], x="phase", y="angle", hue="speed_forward",
                estimator=np.mean, hue_norm=(0, 20), err_style="bars", ci=68,
                col="leg", kind="line", height=3, aspect=0.8)
g.set(ylim=(30, 130))
#+END_SRC

#+RESULTS:
:RESULTS:
: <seaborn.axisgrid.FacetGrid at 0x7f9726a3e910>
[[file:./.ob-jupyter/e6bd764ad356d8dfff0b1236c507fd9009ab0dad.png]]
:END:

* Both combined

#+BEGIN_SRC jupyter-python
fullangf = pd.concat([allangf, realangf]).reset_index(drop=True)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
dd = fullangf
c = (dd['speed_side'].abs() <= 1) & (dd['speed_rotation'].abs() <= 1) & (dd['angle_name'] == 'C_flex') \
    & (dd['speed_forward'] == 4)
g = sns.relplot(data=dd[c], x="phase", y="angle", hue="type",
                estimator=np.mean, err_style='band', ci=95,
                col="leg", kind="line", height=3, aspect=0.8)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/67904cee5ecf090af82f87c06968d9dcc391074e.png]]


#+BEGIN_SRC jupyter-python
dd = fullangf
c = (dd['speed_side'].abs() <= 1) & (dd['speed_rotation'].abs() <= 1) & (dd['angle_name'] == 'C_flex') \
    & (dd['speed_forward'] == 8)
g = sns.relplot(data=dd[c], x="phase", y="angle", hue="type",
                estimator=np.mean, err_style='band', ci=95,
                col="leg", kind="line", height=3, aspect=0.8)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/e21f4834bc92ee7a12f8b928ad198fd9dffdf474.png]]


#+BEGIN_SRC jupyter-python
dd = fullangf
c = (dd['speed_side'].abs() <= 1) & (dd['speed_rotation'].abs() <= 1) & (dd['angle_name'] == 'B_rot') \
    & (dd['speed_forward'] == 4)
g = sns.relplot(data=dd[c], x="phase", y="angle", hue="type",
                estimator=circular_mean, err_style='band', ci=95,
                col="leg", kind="line", height=3, aspect=0.8)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/bfa4d3a0a771e0b2b72acbe274f8972fec7a0678.png]]


#+BEGIN_SRC jupyter-python
dd = fullangf
c = (dd['speed_side'].abs() <= 1) & (dd['speed_rotation'].abs() <= 1) & (dd['angle_name'] == 'B_rot') \
    & (dd['speed_forward'] == 8)
g = sns.relplot(data=dd[c], x="phase", y="angle", hue="type",
                estimator=circular_mean, err_style='band', ci=95,
                col="leg", kind="line", height=3, aspect=0.8)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/a240f827421ede07c332653457112b98e5ba4e79.png]]


#+BEGIN_SRC jupyter-python
dd = fullangf
c = (dd['speed_side'].abs() <= 1) & (dd['speed_rotation'].abs() <= 2) & (dd['angle_name'] == 'B_flex') \
    & (dd['speed_forward'] == 12)
g = sns.relplot(data=dd[c], x="phase", y="angle", hue="type",
                estimator=np.mean, err_style='band', ci=95,
                col="leg", kind="line", height=3, aspect=0.8)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/b50d1dcf0221edcc530b8ddf40295bf34cb089a4.png]]



#+BEGIN_SRC jupyter-python
def add_with_confidence(a, b):
    out = a.copy()
    out['mean'] = a['mean'] + b['mean']
    out['sem'] = np.sqrt(np.square(a['sem']) + np.square(b['sem']))
    return out

def add_with_confidence_circ(a, b):
    out = a.copy()
    out['circular_mean'] = a['circular_mean'] + b['circular_mean']
    out['sem'] = np.sqrt(np.square(a['sem']) + np.square(b['sem']))
    return out

def circular_mean(x):
    return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))

#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python :display plain
dd = allangf
c = (dd['speed_side'].abs() <= 2) & (dd['speed_rotation'].abs() <= 2) & (dd['angle_name'] == 'B_rot')
sd = dd[c].groupby(['leg', 'speed_forward', 'phase'])['angle'].agg([circular_mean, 'sem'])

dd = realangf
c = (dd['speed_side'].abs() <= 2) & (dd['speed_rotation'].abs() <= 2) & (dd['angle_name'] == 'B_rot')
rd = dd[c].groupby(['leg', 'speed_forward', 'phase'])['angle'].agg([circular_mean, 'sem'])

# out = add_with_confidence_circ(sd, -rd)
out = sd - rd
errors = out.reset_index().groupby(['leg', 'speed_forward'])['circular_mean'].agg(lambda x: np.mean(np.abs(x)))
#+END_SRC

#+RESULTS:


#+RESULTS:

#+BEGIN_SRC jupyter-python

#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
for angname in angle_names_1leg:
    print(angname)
    dd = allangf
    c = (dd['angle_name'] == angname)
    columns = ['leg', 'speed_forward', 'speed_rotation', 'speed_side', 'phase']
    sd = dd[c].groupby(columns)['angle'].agg([circular_mean])

    dd = realangf
    c = (dd['angle_name'] == angname)
    rd = dd[c].groupby(columns)['angle'].agg([circular_mean])

    # out = add_with_confidence(sd, -rd)
    # out = np.exp(1j * np.radians(sd)) + np.exp(1j * np.radians(-1*rd))
    out = sd - rd
    # out['circular_mean'] = np.degrees(np.angle(out['circular_mean']))
    errors = out.reset_index().groupby(columns[:-1])['circular_mean']\
                              .agg(lambda x: np.abs(circular_mean(np.abs(x))))

    possible_speeds = allangf['speed_forward'].unique()
    fig, axes = plt.subplots(4, 6, figsize=(10, 8))
    for ix_leg, leg in enumerate(legs):
        for ix_speed, speed in enumerate(possible_speeds):
            d = errors[leg][speed].reset_index().pivot(
                'speed_rotation', 'speed_side', 'circular_mean')
            ax = axes[ix_speed, ix_leg]
            g = sns.heatmap(d, vmin=0, vmax=35, ax=ax, cbar=ix_leg == len(legs)-1,
                            cmap="YlOrRd")
            g.tick_params(left=False, bottom=False)
            if ix_speed != len(possible_speeds) - 1:
                g.set_xlabel('')
                g.set_xticklabels([])
            if ix_leg != 0:
                g.set_ylabel('')
                g.set_yticklabels('')
            if ix_speed == 0:
                g.set_title(leg)
            if ix_leg == 0:
                g.set_ylabel('Forward\n{} mm/s'.format(speed))
    fig.savefig('plots/errors_summary_{}.png'.format(angname))
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
C_flex
/tmp/ipykernel_1946373/3571779153.py:14: RuntimeWarning: Mean of empty slice
  return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))
A_rot
/tmp/ipykernel_1946373/3571779153.py:14: RuntimeWarning: Mean of empty slice
  return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))
A_abduct
/tmp/ipykernel_1946373/3571779153.py:14: RuntimeWarning: Mean of empty slice
  return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))
B_flex
/tmp/ipykernel_1946373/3571779153.py:14: RuntimeWarning: Mean of empty slice
  return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))
B_rot
/tmp/ipykernel_1946373/3571779153.py:14: RuntimeWarning: Mean of empty slice
  return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))
#+end_example
[[file:./.ob-jupyter/69a5c3573ef54bc721a99749ae43dd9f09a2f546.png]]
[[file:./.ob-jupyter/ae0734620472645c91afc73d81fbd9d9612f4947.png]]
[[file:./.ob-jupyter/e2fe5a0030d504562e2c1f57cfefaabe4c1adfb0.png]]
[[file:./.ob-jupyter/e0ccaabcc35766f331308f52a34620f4a8e436f5.png]]
[[file:./.ob-jupyter/19e1b4d4ce43e03ceb734c6991258b41449c69c3.png]]
:END:



#+BEGIN_SRC jupyter-python
print(angname)
dd = allangf
# c = (dd['angle_name'] == angname)
columns = ['leg', 'speed_forward', 'speed_rotation', 'speed_side',  'angle_name', 'phase']
sd = dd.groupby(columns)['angle'].agg([circular_mean])

dd = realangf
# c = (dd['angle_name'] == angname)
rd = dd.groupby(columns)['angle'].agg([circular_mean])

# out = add_with_confidence(sd, -rd)
# out = np.exp(1j * np.radians(sd)) + np.exp(1j * np.radians(-1*rd))
out = sd - rd
# out['circular_mean'] = np.degrees(np.angle(out['circular_mean']))
errors = out.reset_index().groupby(columns[:-1])['circular_mean']\
                          .agg(lambda x: np.abs(circular_mean(np.abs(x))))

possible_speeds = allangf['speed_forward'].unique()
fig, axes = plt.subplots(4, 6, figsize=(10, 8))
for ix_leg, leg in enumerate(legs):
    for ix_speed, speed in enumerate(possible_speeds):
        d = errors[leg][speed].reset_index().pivot(
            'speed_rotation', 'speed_side', 'circular_mean')
        ax = axes[ix_speed, ix_leg]
        g = sns.heatmap(d, vmin=0, vmax=35, ax=ax, cbar=ix_leg == len(legs)-1,
                        cmap="YlOrRd")
        g.tick_params(left=False, bottom=False)
        if ix_speed != len(possible_speeds) - 1:
            g.set_xlabel('')
            g.set_xticklabels([])
        if ix_leg != 0:
            g.set_ylabel('')
            g.set_yticklabels('')
        if ix_speed == 0:
            g.set_title(leg)
        if ix_leg == 0:
            g.set_ylabel('Forward\n{} mm/s'.format(speed))
fig.savefig('plots/errors_summary_full.png')
#+END_SRC

#+RESULTS:
:RESULTS:
: B_rot
: /tmp/ipykernel_1946373/3571779153.py:14: RuntimeWarning: Mean of empty slice
:   return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))
# [goto error]
#+begin_example
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Input In [127], in <cell line: 20>()
     20 for ix_leg, leg in enumerate(legs):
     21     for ix_speed, speed in enumerate(possible_speeds):
---> 22         d = errors[leg][speed].reset_index().pivot(
     23             'speed_rotation', 'speed_side', 'circular_mean')
     24         ax = axes[ix_speed, ix_leg]
     25         g = sns.heatmap(d, vmin=0, vmax=35, ax=ax, cbar=ix_leg == len(legs)-1,
     26                         cmap="YlOrRd")

File /home/pierre/miniconda3/envs/tf/lib/python3.9/site-packages/pandas/core/frame.py:7876, in DataFrame.pivot(self, index, columns, values)
   7871 @Substitution("")
   7872 @Appender(_shared_docs["pivot"])
   7873 def pivot(self, index=None, columns=None, values=None) -> DataFrame:
   7874     from pandas.core.reshape.pivot import pivot
-> 7876     return pivot(self, index=index, columns=columns, values=values)

File /home/pierre/miniconda3/envs/tf/lib/python3.9/site-packages/pandas/core/reshape/pivot.py:520, in pivot(data, index, columns, values)
    518     else:
    519         indexed = data._constructor_sliced(data[values]._values, index=multiindex)
--> 520 return indexed.unstack(columns_listlike)

File /home/pierre/miniconda3/envs/tf/lib/python3.9/site-packages/pandas/core/series.py:4157, in Series.unstack(self, level, fill_value)
   4114 """
   4115 Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.
   4116 
   (...)
   4153 b    2    4
   4154 """
   4155 from pandas.core.reshape.reshape import unstack
-> 4157 return unstack(self, level, fill_value)

File /home/pierre/miniconda3/envs/tf/lib/python3.9/site-packages/pandas/core/reshape/reshape.py:491, in unstack(obj, level, fill_value)
    489 if is_1d_only_ea_dtype(obj.dtype):
    490     return _unstack_extension_series(obj, level, fill_value)
--> 491 unstacker = _Unstacker(
    492     obj.index, level=level, constructor=obj._constructor_expanddim
    493 )
    494 return unstacker.get_result(
    495     obj._values, value_columns=None, fill_value=fill_value
    496 )

File /home/pierre/miniconda3/envs/tf/lib/python3.9/site-packages/pandas/core/reshape/reshape.py:140, in _Unstacker.__init__(self, index, level, constructor)
    133 if num_cells > np.iinfo(np.int32).max:
    134     warnings.warn(
    135         f"The following operation may generate {num_cells} cells "
    136         f"in the resulting pandas object.",
    137         PerformanceWarning,
    138     )
--> 140 self._make_selectors()

File /home/pierre/miniconda3/envs/tf/lib/python3.9/site-packages/pandas/core/reshape/reshape.py:192, in _Unstacker._make_selectors(self)
    189 mask.put(selector, True)
    191 if mask.sum() < len(self.index):
--> 192     raise ValueError("Index contains duplicate entries, cannot reshape")
    194 self.group_index = comp_index
    195 self.mask = mask

ValueError: Index contains duplicate entries, cannot reshape
#+end_example
[[file:./.ob-jupyter/f7d9954696eff0fe5310bac6f94b54221b00720b.png]]
:END:


#+BEGIN_SRC jupyter-python
ds = []
for angname in angle_names_1leg:
    print(angname)
    dd = allangf
    c = (dd['angle_name'] == angname)
    columns = ['leg', 'speed_forward', 'speed_rotation', 'speed_side', 'phase']
    sd = dd[c].groupby(columns)['angle'].agg([circular_mean])

    dd = realangf
    c = (dd['angle_name'] == angname)
    rd = dd[c].groupby(columns)['angle'].agg([circular_mean])

    # out = add_with_confidence(sd, -rd)
    # out = np.exp(1j * np.radians(sd)) + np.exp(1j * np.radians(-1*rd))
    out = sd - rd
    # out['circular_mean'] = np.degrees(np.angle(out['circular_mean']))
    errors = out.reset_index().groupby(columns[:-1])['circular_mean']\
                          .agg(lambda x: np.abs(circular_mean(np.abs(x))))
    errors = errors.reset_index()
    errors['angle_name'] = angname
    ds.append(errors)

#+END_SRC

#+RESULTS:
#+begin_example
C_flex
/tmp/ipykernel_1946373/3571779153.py:14: RuntimeWarning: Mean of empty slice
  return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))
A_rot
/tmp/ipykernel_1946373/3571779153.py:14: RuntimeWarning: Mean of empty slice
  return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))
A_abduct
/tmp/ipykernel_1946373/3571779153.py:14: RuntimeWarning: Mean of empty slice
  return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))
B_flex
/tmp/ipykernel_1946373/3571779153.py:14: RuntimeWarning: Mean of empty slice
  return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))
B_rot
/tmp/ipykernel_1946373/3571779153.py:14: RuntimeWarning: Mean of empty slice
  return np.degrees(np.angle(np.nanmean(np.exp(1j * np.radians(x)))))
#+end_example

#+BEGIN_SRC jupyter-python
angle_errors = pd.concat(ds)

fancy_angle_names = {
    'C_flex': 'femur-tibia flexion',
    'A_rot': 'coxa rotation',
    'A_abduct': 'body-coxa flexion',
    'B_flex': 'coxa-femur flexion',
    'B_rot': 'femur rotation'
}
angle_errors['fancy_angle_name'] = [fancy_angle_names[x] for x in angle_errors['angle_name']]


for name, fancy in fancy_angle_names.items():
    plt.figure()
    d = angle_errors[angle_errors['angle_name'] == name]
    # g = sns.violinplot(x='fancy_angle_name', y='circular_mean', data=d)
    g = sns.swarmplot(x='leg', y='circular_mean', data=d)
    g.set_xticklabels(g.get_xticklabels(), rotation=20, horizontalalignment='right')
    g.set(xlabel='Leg', ylabel='Error (deg)', title=fancy.capitalize(), ylim=(0, 30))
#+END_SRC

#+RESULTS:
:RESULTS:
: /home/pierre/miniconda3/envs/tf/lib/python3.9/site-packages/seaborn/categorical.py:1296: UserWarning: 5.4% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.
:   warnings.warn(msg, UserWarning)
[[file:./.ob-jupyter/dec94657d7fafbb869f2eae893c52a658273133b.png]]
[[file:./.ob-jupyter/1413b81c233948c642fc0ac6c1f3c57b62a813b9.png]]
[[file:./.ob-jupyter/0152f8a0ad27b82eb07f043ac0282d13cea47dbf.png]]
[[file:./.ob-jupyter/f242e3af72ffce09886173fc110c4d5014850d10.png]]
[[file:./.ob-jupyter/09f5f0551e99d94c2fa0eb30874d7270d175eec9.png]]
:END:
